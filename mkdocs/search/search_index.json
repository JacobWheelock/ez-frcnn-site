{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for EZ-FRCNN: A Fast, Accessible and Robust Deep Learning Package for Object Detection Applications in Ethology and Cell Biology EZ-FRCNN is a user-friendly implementation of the popular Faster Region-based Convolutional Neural Network (Faster R-CNN) originally developed by Ren et al . This algorithm is designed by biologists for biologists, and is applicable to virtually any dataset! To get started, visit www.ezfrcnn.com or continue reading below. Features Easy installation and environment setup for all OSes Jupyter Notebook & full GUI available Simple in-house annotation tools Fast training : around 1 hour on a single GPU for a standard dataset Fast inferencing : around 15 FPS on a single GPU Significant documentation and tutorials for use Requirements We provide instructions for installing EZ-FRCNN on Windows or MacOS below. While a GPU is highly recommended to use EZ-FRCNN, it is not required. Installation (Windows) Install Docker for Windows . Launch Docker Desktop. Download or clone this repository. Extract the contents of the ZIP file downloaded in the last step to a folder of your choice (SKIP if you used git clone ). Open the EZ-FRCNN folder and double-click ez-frcnn.bat to launch EZ-FRCNN. OR for a more user-friendly experience , double-click ez-frcnnPane.bat to launch the GUI. Installation (MacOS) Navigate to our Mac branch of this repository . Install Docker for MacOS . Launch Docker Desktop. Download or clone the Mac branch of this repository . Extract the contents of the ZIP file downloaded in the last step to a folder of your choice (SKIP if you used git clone ). Open the EZ-FRCNN folder, double click ez-frcnn.dmg , and drag the .app file into your current working folder. Double-click ez-frcnn.app to launch EZ-FRCNN. OR for a more user-friendly experience , double-click ez-frcnnPane.dmg to launch the GUI. Getting Started Step 1: Annotation - Labeling your Images Annotation is the process of labeling the objects in your images that you want the model to recognize. This might include specific structures, organisms, or other items you\u2019re interested in identifying. 1. Select Images to Annotate : Before opening the app, place all images you would like to annotate to the ez-frcnn/annotations folder. 2. Select Your Classes : After opening the annotation app, choose the classes (category) you want to annotate. For example, if you\u2019re labeling cells, you can create classes like \u201cnucleus\u201d or \u201ccell membrane.\u201d 3. Draw Bounding Boxes : With your class selected, draw a box around each object in the image that belongs to that class. Repeat this step for each class you want the model to learn. 4. Save Your Annotations : Once all objects in an image are labeled, save your annotations. You\u2019ll repeat these steps for a few images to give the model enough examples to learn from. Tip: Annotation can take a bit of time, but the more images you label, the better your model will perform. Aim for at least 20-50 labeled images to get started. Step 2: Training \u2013 Teaching the Model to Recognize Your Objects Once your images are annotated, you\u2019re ready to train the model. Training is where the model learns to recognize your labeled objects based on the examples you provided. 1. Training and Validation Sets : During training, your data is split into two sets: - Training Set : This set is used to teach the model how to recognize your objects. - Validation Set : This set checks the model\u2019s learning progress on new images it hasn\u2019t seen, helping to ensure it\u2019s generalizing rather than memorizing. Both sets are crucial: the training set helps the model learn, while the validation set ensures that learning applies to new images. Understanding the Loss Curves : During training, you\u2019ll see two curves\u2014 training loss and validation loss. These curves represent how well the model is performing: Training Loss : Shows how well the model is learning on the images it\u2019s trained on. Validation Loss : Indicates how well the model generalizes to new, unseen images. Ideally, both curves will decrease over time . If validation loss stops decreasing or begins to rise, it can mean the model is overfitting (learning too specifically to the training data), which may require more varied data or adjustments. Finish Training : Once the model completes training, it will be ready to use. Tip: If you have a larger set of annotated images, the model can learn more accurately, but training might take longer. Start with a small set, and as you grow comfortable, you can add more images and retrain. Step 3: Inference \u2013 Using the Model to Detect Objects in New Images Inference is when the trained model applies what it\u2019s learned to new, unlabeled images. Here, the model will identify and label objects on its own based on the patterns it learned during training. 1. Select New Images : Place new images where you want the model to detect objects automatically into ez-frcnn/test_data/test_images . 2. Run Inference : Select the Run Inference option in EZ-FRCNN. The model will process your images and label objects based on your training. 3. Review the Results : After inference completes, you\u2019ll see boxes around the detected objects in your images, along with confidence scores. - Confidence Score : This number (from 0 to 1) shows the model\u2019s certainty about each detection, where higher scores mean greater confidence in the label. 5. CSV Output : The tool also generates a CSV file listing each image name, detected object, and the confidence score. This provides a quick overview and easy access to results for further analysis. Tip: If the results aren\u2019t as accurate as you\u2019d like, consider adding more annotations and retraining the model. Additional Tips for Success Start Small : Begin with a small number of images and labels. As you gain experience, you can add more data to improve accuracy. Use Clear Images : The clearer and higher quality your images, the better your model will perform. Iterate : Machine learning models improve with iteration. Each round of annotation, training, and inference makes the model a little better! EZ-FRCNN was built to make machine learning accessible and user-friendly. Follow these steps, experiment, and soon you\u2019ll have a trained model that recognizes your objects of interest with minimal effort! References EZ-FRCNN is an implementation of Faster R-CNN, an algorithm developed by Ren et al . Written by Jacob Wheelock and Erin Shappell for Lu Lab, 2025.","title":"Getting Started"},{"location":"#documentation-for-ez-frcnn-a-fast-accessible-and-robust-deep-learning-package-for-object-detection-applications-in-ethology-and-cell-biology","text":"EZ-FRCNN is a user-friendly implementation of the popular Faster Region-based Convolutional Neural Network (Faster R-CNN) originally developed by Ren et al . This algorithm is designed by biologists for biologists, and is applicable to virtually any dataset! To get started, visit www.ezfrcnn.com or continue reading below.","title":"Documentation for EZ-FRCNN: A Fast, Accessible and Robust Deep Learning Package for Object Detection Applications in Ethology and Cell Biology"},{"location":"#features","text":"Easy installation and environment setup for all OSes Jupyter Notebook & full GUI available Simple in-house annotation tools Fast training : around 1 hour on a single GPU for a standard dataset Fast inferencing : around 15 FPS on a single GPU Significant documentation and tutorials for use","title":"Features"},{"location":"#requirements","text":"We provide instructions for installing EZ-FRCNN on Windows or MacOS below. While a GPU is highly recommended to use EZ-FRCNN, it is not required.","title":"Requirements"},{"location":"#installation-windows","text":"Install Docker for Windows . Launch Docker Desktop. Download or clone this repository. Extract the contents of the ZIP file downloaded in the last step to a folder of your choice (SKIP if you used git clone ). Open the EZ-FRCNN folder and double-click ez-frcnn.bat to launch EZ-FRCNN. OR for a more user-friendly experience , double-click ez-frcnnPane.bat to launch the GUI.","title":"Installation (Windows)"},{"location":"#installation-macos","text":"Navigate to our Mac branch of this repository . Install Docker for MacOS . Launch Docker Desktop. Download or clone the Mac branch of this repository . Extract the contents of the ZIP file downloaded in the last step to a folder of your choice (SKIP if you used git clone ). Open the EZ-FRCNN folder, double click ez-frcnn.dmg , and drag the .app file into your current working folder. Double-click ez-frcnn.app to launch EZ-FRCNN. OR for a more user-friendly experience , double-click ez-frcnnPane.dmg to launch the GUI.","title":"Installation (MacOS)"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#step-1-annotation-labeling-your-images","text":"Annotation is the process of labeling the objects in your images that you want the model to recognize. This might include specific structures, organisms, or other items you\u2019re interested in identifying. 1. Select Images to Annotate : Before opening the app, place all images you would like to annotate to the ez-frcnn/annotations folder. 2. Select Your Classes : After opening the annotation app, choose the classes (category) you want to annotate. For example, if you\u2019re labeling cells, you can create classes like \u201cnucleus\u201d or \u201ccell membrane.\u201d 3. Draw Bounding Boxes : With your class selected, draw a box around each object in the image that belongs to that class. Repeat this step for each class you want the model to learn. 4. Save Your Annotations : Once all objects in an image are labeled, save your annotations. You\u2019ll repeat these steps for a few images to give the model enough examples to learn from. Tip: Annotation can take a bit of time, but the more images you label, the better your model will perform. Aim for at least 20-50 labeled images to get started.","title":"Step 1: Annotation - Labeling your Images"},{"location":"#step-2-training-teaching-the-model-to-recognize-your-objects","text":"Once your images are annotated, you\u2019re ready to train the model. Training is where the model learns to recognize your labeled objects based on the examples you provided. 1. Training and Validation Sets : During training, your data is split into two sets: - Training Set : This set is used to teach the model how to recognize your objects. - Validation Set : This set checks the model\u2019s learning progress on new images it hasn\u2019t seen, helping to ensure it\u2019s generalizing rather than memorizing. Both sets are crucial: the training set helps the model learn, while the validation set ensures that learning applies to new images. Understanding the Loss Curves : During training, you\u2019ll see two curves\u2014 training loss and validation loss. These curves represent how well the model is performing: Training Loss : Shows how well the model is learning on the images it\u2019s trained on. Validation Loss : Indicates how well the model generalizes to new, unseen images. Ideally, both curves will decrease over time . If validation loss stops decreasing or begins to rise, it can mean the model is overfitting (learning too specifically to the training data), which may require more varied data or adjustments. Finish Training : Once the model completes training, it will be ready to use. Tip: If you have a larger set of annotated images, the model can learn more accurately, but training might take longer. Start with a small set, and as you grow comfortable, you can add more images and retrain.","title":"Step 2: Training \u2013 Teaching the Model to Recognize Your Objects"},{"location":"#step-3-inference-using-the-model-to-detect-objects-in-new-images","text":"Inference is when the trained model applies what it\u2019s learned to new, unlabeled images. Here, the model will identify and label objects on its own based on the patterns it learned during training. 1. Select New Images : Place new images where you want the model to detect objects automatically into ez-frcnn/test_data/test_images . 2. Run Inference : Select the Run Inference option in EZ-FRCNN. The model will process your images and label objects based on your training. 3. Review the Results : After inference completes, you\u2019ll see boxes around the detected objects in your images, along with confidence scores. - Confidence Score : This number (from 0 to 1) shows the model\u2019s certainty about each detection, where higher scores mean greater confidence in the label. 5. CSV Output : The tool also generates a CSV file listing each image name, detected object, and the confidence score. This provides a quick overview and easy access to results for further analysis. Tip: If the results aren\u2019t as accurate as you\u2019d like, consider adding more annotations and retraining the model.","title":"Step 3: Inference \u2013 Using the Model to Detect Objects in New Images"},{"location":"#additional-tips-for-success","text":"Start Small : Begin with a small number of images and labels. As you gain experience, you can add more data to improve accuracy. Use Clear Images : The clearer and higher quality your images, the better your model will perform. Iterate : Machine learning models improve with iteration. Each round of annotation, training, and inference makes the model a little better! EZ-FRCNN was built to make machine learning accessible and user-friendly. Follow these steps, experiment, and soon you\u2019ll have a trained model that recognizes your objects of interest with minimal effort!","title":"Additional Tips for Success"},{"location":"#references","text":"EZ-FRCNN is an implementation of Faster R-CNN, an algorithm developed by Ren et al . Written by Jacob Wheelock and Erin Shappell for Lu Lab, 2025.","title":"References"},{"location":"annotation/","text":"ez-frcnn.annotation def annotation.encode_image(filepath): Encodes an image file as a base64 string with a data URI prefix. Inputs filepath (str): The path to the image file to be encoded. Output str: A base64-encoded string representation of the image, prefixed with \"data:image/png;base64,\" for embedding in HTML or CSS. Source code in library/annotation.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def encode_image ( filepath ): \"\"\" Encodes an image file as a base64 string with a data URI prefix. Inputs: filepath (str): The path to the image file to be encoded. Output: str: A base64-encoded string representation of the image, prefixed with \"data:image/png;base64,\" for embedding in HTML or CSS. \"\"\" with open ( filepath , 'rb' ) as f : image_bytes = f . read () encoded = str ( base64 . b64encode ( image_bytes ), 'utf-8' ) return \"data:image/png;base64,\" + encoded def annotation.init_annotations(classes): Initializes an interactive image annotation interface using Jupyter widgets. Inputs classes (list of str): A list of class labels that users can assign to bounding boxes. Output VBox: A widget container that includes image display, navigation buttons, a label, and a progress bar for annotating images in a directory. Source code in library/annotation.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def init_annotations ( classes ): \"\"\" Initializes an interactive image annotation interface using Jupyter widgets. Inputs: classes (list of str): A list of class labels that users can assign to bounding boxes. Output: VBox: A widget container that includes image display, navigation buttons, a label, and a progress bar for annotating images in a directory. \"\"\" global files , annotations , current_index # Ensure these are accessible globally path = './annotations/' current_index = 0 # Initialize the index variable annotations = {} image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions files = glob . glob ( f \" { path } /*.png\" ) for extension in all_extensions : files . extend ( glob . glob ( f \" { path } /*. { extension } \" )) files = [ os . path . basename ( image_path ) for image_path in files ] # More portable than split('/') if not files : print ( \"No images found in the specified directory.\" ) return im = encode_image ( os . path . join ( path , files [ 0 ])) w_bbox = BBoxWidget ( image = im , classes = classes , hide_buttons = True ) # Initialize the label widget here to update it in the functions label = widgets . Label ( value = files [ 0 ]) # Define the function to update the image and label def update_image_and_annotations (): nonlocal label # Indicates that we're using the `label` defined outside this function global current_index if current_index < len ( files ): image_file = encode_image ( os . path . join ( path , files [ current_index ])) w_bbox . image = image_file # Update the image in the widget w_progress . value = current_index # Update the progress bar w_progress . description = f \" { current_index + 1 } / { len ( files ) } \" # Update the progress bar name with index/total label . value = files [ current_index ] # Update the label else : print ( \"Reached the end of the file list.\" ) def go_back ( _ ): global current_index if current_index > 0 : current_index -= 1 w_bbox . bboxes = [] update_image_and_annotations () def skip ( _ ): global current_index if current_index < len ( files ) - 1 : current_index += 1 w_bbox . bboxes = [] update_image_and_annotations () def submit ( _ ): global annotations , current_index image_file = files [ w_progress . value ] path = './annotations/' #print(image_file) image = cv2 . imread ( os . path . join ( path , image_file )) height , width , _ = image . shape # save annotations for current image annotations [ image_file ] = w_bbox . bboxes if annotations [ image_file ]: annotations_for_image = { 'annotation' : { 'object' : annotations [ image_file ]}} else : # No annotations, create a 'background' label with full image bounding box background_annotation = { 'x' : 0 , 'y' : 0 , 'width' : width , 'height' : height , 'label' : 'background' } annotations_for_image = { 'annotation' : { 'object' : background_annotation }} xml_string = xmltodict . unparse ( annotations_for_image , pretty = True ) with open ( path + image_file [: - 4 ] + '.xml' , 'w' ) as f : #json.dump(annotations[image_file], f, indent=4) f . write ( xml_string ) # move on to the next file skip ( _ ) def on_reset_clicked ( b ): w_bbox . bboxes = [] # Clears the drawn boxes in your widget # Connect buttons to their callbacks go_back_button = widgets . Button ( description = \"Go Back\" , layout = Layout ( width = 'auto' )) go_back_button . on_click ( go_back ) skip_button = widgets . Button ( description = \"Skip\" , layout = Layout ( width = 'auto' )) skip_button . on_click ( skip ) reset_button = widgets . Button ( description = \"Reset\" , layout = Layout ( width = 'auto' )) reset_button . on_click ( on_reset_clicked ) submit_button = widgets . Button ( description = \"Submit\" , layout = Layout ( width = 'auto' )) submit_button . on_click ( submit ) # Progress bar to show how far we got # Progress bar to show how far we got, moved slightly to the left using margin w_progress = widgets . IntProgress ( value = 0 , max = len ( files ) - 1 , description = f '1 / { len ( files ) } ' , layout = widgets . Layout ( width = '287px' , margin = '0 0 0 -40px' ) # Adjust width and left margin ) # Combine widgets into containers navigation_buttons = widgets . HBox ([ go_back_button , skip_button , submit_button , reset_button ], layout = Layout ( margin = '0 0 0 3px' )) w_progressLabeled = widgets . HBox ([ w_progress , label ]) w_container = widgets . VBox ([ w_progressLabeled , navigation_buttons , w_bbox , ]) return w_container def annotation.split_images_and_xml(source_folder, train_folder='./images/train/', test_folder='./images/test/', test_ratio=0.1): Randomly splits a set of images and corresponding XML annotation files into training and testing folders. Generates individual CSV annotation files for each image based on its XML. Inputs source_folder (str): Folder containing the original image and XML files. train_folder (str): Destination folder for training images and annotations. Default is './images/train/'. test_folder (str): Destination folder for testing images and annotations. Default is './images/test/'. test_ratio (float): Proportion of the dataset to allocate to the test set. Default is 0.1 (10%). Output None Source code in library/annotation.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def split_images_and_xml ( source_folder , train_folder = './images/train/' , test_folder = './images/test/' , test_ratio = 0.1 ): \"\"\" Randomly splits a set of images and corresponding XML annotation files into training and testing folders. Generates individual CSV annotation files for each image based on its XML. Inputs: source_folder (str): Folder containing the original image and XML files. train_folder (str): Destination folder for training images and annotations. Default is './images/train/'. test_folder (str): Destination folder for testing images and annotations. Default is './images/test/'. test_ratio (float): Proportion of the dataset to allocate to the test set. Default is 0.1 (10%). Output: None \"\"\" # Ensure the train and test folders exist os . makedirs ( train_folder , exist_ok = True ) os . makedirs ( test_folder , exist_ok = True ) image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions # Find all image files in the source folder. . image_files = glob . glob ( os . path . join ( source_folder , \"*.png\" )) path = './annotations' for extension in all_extensions : image_files . extend ( glob . glob ( f \" { path } /*. { extension } \" )) # Shuffle the image files to ensure random selection random . shuffle ( image_files ) # Calculate the number of files to allocate to the test set num_test_files = int ( len ( image_files ) * test_ratio ) # Split the files into training and testing sets test_files = image_files [: num_test_files ] train_files = image_files [ num_test_files :] # Function to convert XML annotations to CSV format def xml_to_csv ( xml_file , output_csv_file ): with open ( xml_file ) as xml_fd : annotation_data = xmltodict . parse ( xml_fd . read ()) objects = annotation_data . get ( 'annotation' , {}) . get ( 'object' , []) # Handle case if only one object exists (not a list) if not isinstance ( objects , list ): objects = [ objects ] csv_rows = [] for obj in objects : if obj is not None : class_name = obj [ 'label' ] x = obj [ 'x' ] y = obj [ 'y' ] width = obj [ 'width' ] height = obj [ 'height' ] csv_rows . append ([ class_name , x , y , width , height ]) # Convert rows to a pandas DataFrame and save to CSV df = pd . DataFrame ( csv_rows , columns = [ 'class' , 'xmin' , 'ymin' , 'xmax' , 'ymax' ]) df . to_csv ( output_csv_file , index = False ) # Copy the files to their respective folders and generate CSV annotations for file_path in test_files : shutil . copy ( file_path , test_folder ) xml_path = os . path . splitext ( file_path )[ 0 ] + '.xml' if os . path . exists ( xml_path ): shutil . copy ( xml_path , test_folder ) csv_path = os . path . splitext ( file_path )[ 0 ] + '.csv' xml_to_csv ( xml_path , os . path . join ( test_folder , os . path . basename ( csv_path ))) for file_path in train_files : shutil . copy ( file_path , train_folder ) xml_path = os . path . splitext ( file_path )[ 0 ] + '.xml' if os . path . exists ( xml_path ): shutil . copy ( xml_path , train_folder ) csv_path = os . path . splitext ( file_path )[ 0 ] + '.csv' xml_to_csv ( xml_path , os . path . join ( source_folder , os . path . basename ( csv_path )))","title":"ez-frcnn.annotation"},{"location":"annotation/#ez-frcnnannotation","text":"def annotation.encode_image(filepath): Encodes an image file as a base64 string with a data URI prefix. Inputs filepath (str): The path to the image file to be encoded. Output str: A base64-encoded string representation of the image, prefixed with \"data:image/png;base64,\" for embedding in HTML or CSS. Source code in library/annotation.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def encode_image ( filepath ): \"\"\" Encodes an image file as a base64 string with a data URI prefix. Inputs: filepath (str): The path to the image file to be encoded. Output: str: A base64-encoded string representation of the image, prefixed with \"data:image/png;base64,\" for embedding in HTML or CSS. \"\"\" with open ( filepath , 'rb' ) as f : image_bytes = f . read () encoded = str ( base64 . b64encode ( image_bytes ), 'utf-8' ) return \"data:image/png;base64,\" + encoded def annotation.init_annotations(classes): Initializes an interactive image annotation interface using Jupyter widgets. Inputs classes (list of str): A list of class labels that users can assign to bounding boxes. Output VBox: A widget container that includes image display, navigation buttons, a label, and a progress bar for annotating images in a directory. Source code in library/annotation.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def init_annotations ( classes ): \"\"\" Initializes an interactive image annotation interface using Jupyter widgets. Inputs: classes (list of str): A list of class labels that users can assign to bounding boxes. Output: VBox: A widget container that includes image display, navigation buttons, a label, and a progress bar for annotating images in a directory. \"\"\" global files , annotations , current_index # Ensure these are accessible globally path = './annotations/' current_index = 0 # Initialize the index variable annotations = {} image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions files = glob . glob ( f \" { path } /*.png\" ) for extension in all_extensions : files . extend ( glob . glob ( f \" { path } /*. { extension } \" )) files = [ os . path . basename ( image_path ) for image_path in files ] # More portable than split('/') if not files : print ( \"No images found in the specified directory.\" ) return im = encode_image ( os . path . join ( path , files [ 0 ])) w_bbox = BBoxWidget ( image = im , classes = classes , hide_buttons = True ) # Initialize the label widget here to update it in the functions label = widgets . Label ( value = files [ 0 ]) # Define the function to update the image and label def update_image_and_annotations (): nonlocal label # Indicates that we're using the `label` defined outside this function global current_index if current_index < len ( files ): image_file = encode_image ( os . path . join ( path , files [ current_index ])) w_bbox . image = image_file # Update the image in the widget w_progress . value = current_index # Update the progress bar w_progress . description = f \" { current_index + 1 } / { len ( files ) } \" # Update the progress bar name with index/total label . value = files [ current_index ] # Update the label else : print ( \"Reached the end of the file list.\" ) def go_back ( _ ): global current_index if current_index > 0 : current_index -= 1 w_bbox . bboxes = [] update_image_and_annotations () def skip ( _ ): global current_index if current_index < len ( files ) - 1 : current_index += 1 w_bbox . bboxes = [] update_image_and_annotations () def submit ( _ ): global annotations , current_index image_file = files [ w_progress . value ] path = './annotations/' #print(image_file) image = cv2 . imread ( os . path . join ( path , image_file )) height , width , _ = image . shape # save annotations for current image annotations [ image_file ] = w_bbox . bboxes if annotations [ image_file ]: annotations_for_image = { 'annotation' : { 'object' : annotations [ image_file ]}} else : # No annotations, create a 'background' label with full image bounding box background_annotation = { 'x' : 0 , 'y' : 0 , 'width' : width , 'height' : height , 'label' : 'background' } annotations_for_image = { 'annotation' : { 'object' : background_annotation }} xml_string = xmltodict . unparse ( annotations_for_image , pretty = True ) with open ( path + image_file [: - 4 ] + '.xml' , 'w' ) as f : #json.dump(annotations[image_file], f, indent=4) f . write ( xml_string ) # move on to the next file skip ( _ ) def on_reset_clicked ( b ): w_bbox . bboxes = [] # Clears the drawn boxes in your widget # Connect buttons to their callbacks go_back_button = widgets . Button ( description = \"Go Back\" , layout = Layout ( width = 'auto' )) go_back_button . on_click ( go_back ) skip_button = widgets . Button ( description = \"Skip\" , layout = Layout ( width = 'auto' )) skip_button . on_click ( skip ) reset_button = widgets . Button ( description = \"Reset\" , layout = Layout ( width = 'auto' )) reset_button . on_click ( on_reset_clicked ) submit_button = widgets . Button ( description = \"Submit\" , layout = Layout ( width = 'auto' )) submit_button . on_click ( submit ) # Progress bar to show how far we got # Progress bar to show how far we got, moved slightly to the left using margin w_progress = widgets . IntProgress ( value = 0 , max = len ( files ) - 1 , description = f '1 / { len ( files ) } ' , layout = widgets . Layout ( width = '287px' , margin = '0 0 0 -40px' ) # Adjust width and left margin ) # Combine widgets into containers navigation_buttons = widgets . HBox ([ go_back_button , skip_button , submit_button , reset_button ], layout = Layout ( margin = '0 0 0 3px' )) w_progressLabeled = widgets . HBox ([ w_progress , label ]) w_container = widgets . VBox ([ w_progressLabeled , navigation_buttons , w_bbox , ]) return w_container def annotation.split_images_and_xml(source_folder, train_folder='./images/train/', test_folder='./images/test/', test_ratio=0.1): Randomly splits a set of images and corresponding XML annotation files into training and testing folders. Generates individual CSV annotation files for each image based on its XML. Inputs source_folder (str): Folder containing the original image and XML files. train_folder (str): Destination folder for training images and annotations. Default is './images/train/'. test_folder (str): Destination folder for testing images and annotations. Default is './images/test/'. test_ratio (float): Proportion of the dataset to allocate to the test set. Default is 0.1 (10%). Output None Source code in library/annotation.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def split_images_and_xml ( source_folder , train_folder = './images/train/' , test_folder = './images/test/' , test_ratio = 0.1 ): \"\"\" Randomly splits a set of images and corresponding XML annotation files into training and testing folders. Generates individual CSV annotation files for each image based on its XML. Inputs: source_folder (str): Folder containing the original image and XML files. train_folder (str): Destination folder for training images and annotations. Default is './images/train/'. test_folder (str): Destination folder for testing images and annotations. Default is './images/test/'. test_ratio (float): Proportion of the dataset to allocate to the test set. Default is 0.1 (10%). Output: None \"\"\" # Ensure the train and test folders exist os . makedirs ( train_folder , exist_ok = True ) os . makedirs ( test_folder , exist_ok = True ) image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions # Find all image files in the source folder. . image_files = glob . glob ( os . path . join ( source_folder , \"*.png\" )) path = './annotations' for extension in all_extensions : image_files . extend ( glob . glob ( f \" { path } /*. { extension } \" )) # Shuffle the image files to ensure random selection random . shuffle ( image_files ) # Calculate the number of files to allocate to the test set num_test_files = int ( len ( image_files ) * test_ratio ) # Split the files into training and testing sets test_files = image_files [: num_test_files ] train_files = image_files [ num_test_files :] # Function to convert XML annotations to CSV format def xml_to_csv ( xml_file , output_csv_file ): with open ( xml_file ) as xml_fd : annotation_data = xmltodict . parse ( xml_fd . read ()) objects = annotation_data . get ( 'annotation' , {}) . get ( 'object' , []) # Handle case if only one object exists (not a list) if not isinstance ( objects , list ): objects = [ objects ] csv_rows = [] for obj in objects : if obj is not None : class_name = obj [ 'label' ] x = obj [ 'x' ] y = obj [ 'y' ] width = obj [ 'width' ] height = obj [ 'height' ] csv_rows . append ([ class_name , x , y , width , height ]) # Convert rows to a pandas DataFrame and save to CSV df = pd . DataFrame ( csv_rows , columns = [ 'class' , 'xmin' , 'ymin' , 'xmax' , 'ymax' ]) df . to_csv ( output_csv_file , index = False ) # Copy the files to their respective folders and generate CSV annotations for file_path in test_files : shutil . copy ( file_path , test_folder ) xml_path = os . path . splitext ( file_path )[ 0 ] + '.xml' if os . path . exists ( xml_path ): shutil . copy ( xml_path , test_folder ) csv_path = os . path . splitext ( file_path )[ 0 ] + '.csv' xml_to_csv ( xml_path , os . path . join ( test_folder , os . path . basename ( csv_path ))) for file_path in train_files : shutil . copy ( file_path , train_folder ) xml_path = os . path . splitext ( file_path )[ 0 ] + '.xml' if os . path . exists ( xml_path ): shutil . copy ( xml_path , train_folder ) csv_path = os . path . splitext ( file_path )[ 0 ] + '.csv' xml_to_csv ( xml_path , os . path . join ( source_folder , os . path . basename ( csv_path )))","title":"ez-frcnn.annotation"},{"location":"characterize/","text":"ez-frcnn.characterize def characterize.get_subsampled_dataset(full_dataset, num_samples): Returns a randomly subsampled subset of a given dataset. Inputs full_dataset (Dataset): A PyTorch-style dataset to sample from. num_samples (int): The number of samples to include in the returned subset. Output Subset: A torch.utils.data.Subset containing num_samples randomly selected items from the original dataset. Source code in library/characterize.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def get_subsampled_dataset ( full_dataset , num_samples ): \"\"\" Returns a randomly subsampled subset of a given dataset. Inputs: full_dataset (Dataset): A PyTorch-style dataset to sample from. num_samples (int): The number of samples to include in the returned subset. Output: Subset: A torch.utils.data.Subset containing `num_samples` randomly selected items from the original dataset. \"\"\" indices = np . random . permutation ( len ( full_dataset ))[: num_samples ] return Subset ( full_dataset , indices ) def characterize.get_mAP(dataloader, model, device): Computes the mean Average Precision (mAP) for a given object detection model on a dataset. Inputs dataloader (DataLoader): A PyTorch DataLoader providing batches of images and targets. model (nn.Module): The object detection model to evaluate. device (torch.device): The device (CPU or GPU) on which to run the model. Output dict: A dictionary containing mAP metrics computed by torchmetrics.MeanAveragePrecision(). Source code in library/characterize.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def get_mAP ( dataloader , model , device ): \"\"\" Computes the mean Average Precision (mAP) for a given object detection model on a dataset. Inputs: dataloader (DataLoader): A PyTorch DataLoader providing batches of images and targets. model (nn.Module): The object detection model to evaluate. device (torch.device): The device (CPU or GPU) on which to run the model. Output: dict: A dictionary containing mAP metrics computed by torchmetrics.MeanAveragePrecision(). \"\"\" metric = MeanAveragePrecision () model . eval () model . to ( device ) # Iterate over the DataLoader for images , targets in dataloader : images = [ image . to ( device ) for image in images ] targets = [{ k : v . to ( device ) for k , v in t . items ()} for t in targets ] with torch . no_grad (): outputs = model ( images ) # Prepare predictions and targets for torchmetrics preds = [] for output in outputs : preds . append ({ \"boxes\" : output [ 'boxes' ] . cpu (), \"scores\" : output [ 'scores' ] . cpu (), \"labels\" : output [ 'labels' ] . cpu (), }) tars = [] for target in targets : tars . append ({ \"boxes\" : target [ 'boxes' ] . cpu (), \"labels\" : target [ 'labels' ] . cpu (), }) # Update the metric with predictions and targets metric . update ( preds , tars ) # Compute the final mAP score mAP = metric . compute () return mAP def characterize.run_experiment(full_train_dataset, valid_dataset, num_classes, BATCH_SIZE, NUM_EXPERIMENTS=5, EPOCHS_PER_EXPERIMENT=100, TRIALS_PER_EXPERIMENT=3): Runs a series of training experiments with increasing amounts of training data to evaluate model performance. Inputs full_train_dataset (Dataset): The full training dataset to subsample from. valid_dataset (Dataset): The validation dataset used to compute validation mAP. num_classes (int): Number of object classes (including background if applicable). BATCH_SIZE (int): Batch size used for training and validation. NUM_EXPERIMENTS (int): Number of increasing training set sizes to evaluate. Default is 5. EPOCHS_PER_EXPERIMENT (int): Number of training epochs per experiment. Default is 100. TRIALS_PER_EXPERIMENT (int): Number of trials to average per training size. Default is 3. Output list: A list of tuples, each containing (num_samples, mean_mAP, std_mAP) for each experiment. Source code in library/characterize.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def run_experiment ( full_train_dataset , valid_dataset , num_classes , BATCH_SIZE , NUM_EXPERIMENTS = 5 , EPOCHS_PER_EXPERIMENT = 100 , TRIALS_PER_EXPERIMENT = 3 ): \"\"\" Runs a series of training experiments with increasing amounts of training data to evaluate model performance. Inputs: full_train_dataset (Dataset): The full training dataset to subsample from. valid_dataset (Dataset): The validation dataset used to compute validation mAP. num_classes (int): Number of object classes (including background if applicable). BATCH_SIZE (int): Batch size used for training and validation. NUM_EXPERIMENTS (int): Number of increasing training set sizes to evaluate. Default is 5. EPOCHS_PER_EXPERIMENT (int): Number of training epochs per experiment. Default is 100. TRIALS_PER_EXPERIMENT (int): Number of trials to average per training size. Default is 3. Output: list: A list of tuples, each containing (num_samples, mean_mAP, std_mAP) for each experiment. \"\"\" # Device configuration device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) metric = MeanAveragePrecision () # Directory setup for models and plots model_dir = 'models/' plot_dir = 'plots/' # Calculate number of samples for each experiment total_samples = len ( full_train_dataset ) split_sizes = np . linspace ( 0 , total_samples , NUM_EXPERIMENTS + 1 , dtype = int )[ 1 :] results = [] # Create plot plt . figure () mean_mAPs = [] std_mAPs = [] for num_samples in split_sizes : mAPs = [] for trial in range ( TRIALS_PER_EXPERIMENT ): print ( f \" \\n Running training with { num_samples } samples, trial { trial + 1 } ...\" ) # Subsample the training dataset train_subset = get_subsampled_dataset ( full_train_dataset , num_samples ) train_loader , valid_loader = get_loaders ( train_subset , valid_dataset , BATCH_SIZE , collate_fn ) # Initialize a fresh instance of the model model = create_model ( num_classes ) . to ( device ) # Train the model train_model_no_val ( model , train_loader , valid_loader , device , 'experiment_model' , EPOCHS_PER_EXPERIMENT , model_dir , plot_dir , 10 , 10 ) # Evaluate the model val_mAP = get_mAP ( valid_loader , model , device ) val_mAP = float ( val_mAP [ 'map_50' ]) mAPs . append ( val_mAP ) print ( f \"Trial { trial + 1 } : Validation mAP = { val_mAP : .3f } \" ) # Compute statistics mean_mAP = np . mean ( mAPs ) std_mAP = np . std ( mAPs ) mean_mAPs . append ( mean_mAP ) std_mAPs . append ( std_mAP ) results . append (( num_samples , mean_mAP , std_mAP )) print ( f \"Finished { num_samples } samples: Mean Validation mAP = { mean_mAP : .3f } , Std Dev = { std_mAP : .3f } \" ) # Plotting results plt . errorbar ( split_sizes , mean_mAPs , yerr = std_mAPs , fmt = '-o' , capsize = 5 ) plt . title ( 'Mean and Standard Deviation of Validation mAP' ) plt . xlabel ( 'Number of Training Samples' ) plt . ylabel ( 'Validation mAP' ) plt . grid ( True ) plt . savefig ( f \" { plot_dir } /mAP_results.png\" ) plt . show () return results","title":"ez-frcnn.characterize"},{"location":"characterize/#ez-frcnncharacterize","text":"def characterize.get_subsampled_dataset(full_dataset, num_samples): Returns a randomly subsampled subset of a given dataset. Inputs full_dataset (Dataset): A PyTorch-style dataset to sample from. num_samples (int): The number of samples to include in the returned subset. Output Subset: A torch.utils.data.Subset containing num_samples randomly selected items from the original dataset. Source code in library/characterize.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def get_subsampled_dataset ( full_dataset , num_samples ): \"\"\" Returns a randomly subsampled subset of a given dataset. Inputs: full_dataset (Dataset): A PyTorch-style dataset to sample from. num_samples (int): The number of samples to include in the returned subset. Output: Subset: A torch.utils.data.Subset containing `num_samples` randomly selected items from the original dataset. \"\"\" indices = np . random . permutation ( len ( full_dataset ))[: num_samples ] return Subset ( full_dataset , indices ) def characterize.get_mAP(dataloader, model, device): Computes the mean Average Precision (mAP) for a given object detection model on a dataset. Inputs dataloader (DataLoader): A PyTorch DataLoader providing batches of images and targets. model (nn.Module): The object detection model to evaluate. device (torch.device): The device (CPU or GPU) on which to run the model. Output dict: A dictionary containing mAP metrics computed by torchmetrics.MeanAveragePrecision(). Source code in library/characterize.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def get_mAP ( dataloader , model , device ): \"\"\" Computes the mean Average Precision (mAP) for a given object detection model on a dataset. Inputs: dataloader (DataLoader): A PyTorch DataLoader providing batches of images and targets. model (nn.Module): The object detection model to evaluate. device (torch.device): The device (CPU or GPU) on which to run the model. Output: dict: A dictionary containing mAP metrics computed by torchmetrics.MeanAveragePrecision(). \"\"\" metric = MeanAveragePrecision () model . eval () model . to ( device ) # Iterate over the DataLoader for images , targets in dataloader : images = [ image . to ( device ) for image in images ] targets = [{ k : v . to ( device ) for k , v in t . items ()} for t in targets ] with torch . no_grad (): outputs = model ( images ) # Prepare predictions and targets for torchmetrics preds = [] for output in outputs : preds . append ({ \"boxes\" : output [ 'boxes' ] . cpu (), \"scores\" : output [ 'scores' ] . cpu (), \"labels\" : output [ 'labels' ] . cpu (), }) tars = [] for target in targets : tars . append ({ \"boxes\" : target [ 'boxes' ] . cpu (), \"labels\" : target [ 'labels' ] . cpu (), }) # Update the metric with predictions and targets metric . update ( preds , tars ) # Compute the final mAP score mAP = metric . compute () return mAP def characterize.run_experiment(full_train_dataset, valid_dataset, num_classes, BATCH_SIZE, NUM_EXPERIMENTS=5, EPOCHS_PER_EXPERIMENT=100, TRIALS_PER_EXPERIMENT=3): Runs a series of training experiments with increasing amounts of training data to evaluate model performance. Inputs full_train_dataset (Dataset): The full training dataset to subsample from. valid_dataset (Dataset): The validation dataset used to compute validation mAP. num_classes (int): Number of object classes (including background if applicable). BATCH_SIZE (int): Batch size used for training and validation. NUM_EXPERIMENTS (int): Number of increasing training set sizes to evaluate. Default is 5. EPOCHS_PER_EXPERIMENT (int): Number of training epochs per experiment. Default is 100. TRIALS_PER_EXPERIMENT (int): Number of trials to average per training size. Default is 3. Output list: A list of tuples, each containing (num_samples, mean_mAP, std_mAP) for each experiment. Source code in library/characterize.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def run_experiment ( full_train_dataset , valid_dataset , num_classes , BATCH_SIZE , NUM_EXPERIMENTS = 5 , EPOCHS_PER_EXPERIMENT = 100 , TRIALS_PER_EXPERIMENT = 3 ): \"\"\" Runs a series of training experiments with increasing amounts of training data to evaluate model performance. Inputs: full_train_dataset (Dataset): The full training dataset to subsample from. valid_dataset (Dataset): The validation dataset used to compute validation mAP. num_classes (int): Number of object classes (including background if applicable). BATCH_SIZE (int): Batch size used for training and validation. NUM_EXPERIMENTS (int): Number of increasing training set sizes to evaluate. Default is 5. EPOCHS_PER_EXPERIMENT (int): Number of training epochs per experiment. Default is 100. TRIALS_PER_EXPERIMENT (int): Number of trials to average per training size. Default is 3. Output: list: A list of tuples, each containing (num_samples, mean_mAP, std_mAP) for each experiment. \"\"\" # Device configuration device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) metric = MeanAveragePrecision () # Directory setup for models and plots model_dir = 'models/' plot_dir = 'plots/' # Calculate number of samples for each experiment total_samples = len ( full_train_dataset ) split_sizes = np . linspace ( 0 , total_samples , NUM_EXPERIMENTS + 1 , dtype = int )[ 1 :] results = [] # Create plot plt . figure () mean_mAPs = [] std_mAPs = [] for num_samples in split_sizes : mAPs = [] for trial in range ( TRIALS_PER_EXPERIMENT ): print ( f \" \\n Running training with { num_samples } samples, trial { trial + 1 } ...\" ) # Subsample the training dataset train_subset = get_subsampled_dataset ( full_train_dataset , num_samples ) train_loader , valid_loader = get_loaders ( train_subset , valid_dataset , BATCH_SIZE , collate_fn ) # Initialize a fresh instance of the model model = create_model ( num_classes ) . to ( device ) # Train the model train_model_no_val ( model , train_loader , valid_loader , device , 'experiment_model' , EPOCHS_PER_EXPERIMENT , model_dir , plot_dir , 10 , 10 ) # Evaluate the model val_mAP = get_mAP ( valid_loader , model , device ) val_mAP = float ( val_mAP [ 'map_50' ]) mAPs . append ( val_mAP ) print ( f \"Trial { trial + 1 } : Validation mAP = { val_mAP : .3f } \" ) # Compute statistics mean_mAP = np . mean ( mAPs ) std_mAP = np . std ( mAPs ) mean_mAPs . append ( mean_mAP ) std_mAPs . append ( std_mAP ) results . append (( num_samples , mean_mAP , std_mAP )) print ( f \"Finished { num_samples } samples: Mean Validation mAP = { mean_mAP : .3f } , Std Dev = { std_mAP : .3f } \" ) # Plotting results plt . errorbar ( split_sizes , mean_mAPs , yerr = std_mAPs , fmt = '-o' , capsize = 5 ) plt . title ( 'Mean and Standard Deviation of Validation mAP' ) plt . xlabel ( 'Number of Training Samples' ) plt . ylabel ( 'Validation mAP' ) plt . grid ( True ) plt . savefig ( f \" { plot_dir } /mAP_results.png\" ) plt . show () return results","title":"ez-frcnn.characterize"},{"location":"image_augs/","text":"ez-frcnn.image_augs def image_augs.get_train_transform(): Returns a composition of data augmentation transforms for training images and bounding boxes. Inputs None Output albumentations.Compose: A composition of image transformations applied with specified probabilities, including flipping, rotation, blurring, and tensor conversion, with bounding box support in Pascal VOC format. Source code in library/image_augs.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def get_train_transform (): \"\"\" Returns a composition of data augmentation transforms for training images and bounding boxes. Inputs: None Output: albumentations.Compose: A composition of image transformations applied with specified probabilities, including flipping, rotation, blurring, and tensor conversion, with bounding box support in Pascal VOC format. \"\"\" return A . Compose ([ A . Flip ( 0.5 ), A . RandomRotate90 ( 0.5 ), A . MotionBlur ( p = 0.2 ), A . MedianBlur ( blur_limit = 3 , p = 0.1 ), A . Blur ( blur_limit = 3 , p = 0.1 ), ToTensorV2 ( p = 1.0 ), ], bbox_params = { 'format' : 'pascal_voc' , 'label_fields' : [ 'labels' ] }) def image_augs.get_valid_transform(): Returns the transformation applied to validation images and bounding boxes. Inputs None Output albumentations.Compose: A composition that converts images and bounding boxes to tensors, with bounding box support in Pascal VOC format. Source code in library/image_augs.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def get_valid_transform (): \"\"\" Returns the transformation applied to validation images and bounding boxes. Inputs: None Output: albumentations.Compose: A composition that converts images and bounding boxes to tensors, with bounding box support in Pascal VOC format. \"\"\" return A . Compose ([ ToTensorV2 ( p = 1.0 ), ], bbox_params = { 'format' : 'pascal_voc' , 'label_fields' : [ 'labels' ] })","title":"ez-frcnn.image_augs"},{"location":"image_augs/#ez-frcnnimage_augs","text":"def image_augs.get_train_transform(): Returns a composition of data augmentation transforms for training images and bounding boxes. Inputs None Output albumentations.Compose: A composition of image transformations applied with specified probabilities, including flipping, rotation, blurring, and tensor conversion, with bounding box support in Pascal VOC format. Source code in library/image_augs.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def get_train_transform (): \"\"\" Returns a composition of data augmentation transforms for training images and bounding boxes. Inputs: None Output: albumentations.Compose: A composition of image transformations applied with specified probabilities, including flipping, rotation, blurring, and tensor conversion, with bounding box support in Pascal VOC format. \"\"\" return A . Compose ([ A . Flip ( 0.5 ), A . RandomRotate90 ( 0.5 ), A . MotionBlur ( p = 0.2 ), A . MedianBlur ( blur_limit = 3 , p = 0.1 ), A . Blur ( blur_limit = 3 , p = 0.1 ), ToTensorV2 ( p = 1.0 ), ], bbox_params = { 'format' : 'pascal_voc' , 'label_fields' : [ 'labels' ] }) def image_augs.get_valid_transform(): Returns the transformation applied to validation images and bounding boxes. Inputs None Output albumentations.Compose: A composition that converts images and bounding boxes to tensors, with bounding box support in Pascal VOC format. Source code in library/image_augs.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def get_valid_transform (): \"\"\" Returns the transformation applied to validation images and bounding boxes. Inputs: None Output: albumentations.Compose: A composition that converts images and bounding boxes to tensors, with bounding box support in Pascal VOC format. \"\"\" return A . Compose ([ ToTensorV2 ( p = 1.0 ), ], bbox_params = { 'format' : 'pascal_voc' , 'label_fields' : [ 'labels' ] })","title":"ez-frcnn.image_augs"},{"location":"inferencing/","text":"ez-frcnn.inferencing def inferencing.load_model(model_name, MODEL_DIR, NUM_CLASSES): Loads a trained model from disk and prepares it for evaluation. Inputs model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory path where the model files are stored. NUM_CLASSES (int): Number of output classes for the model. Output nn.Module: The loaded PyTorch model set to evaluation mode on the appropriate device. Source code in library/inferencing.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def load_model ( model_name , MODEL_DIR , NUM_CLASSES ): \"\"\" Loads a trained model from disk and prepares it for evaluation. Inputs: model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory path where the model files are stored. NUM_CLASSES (int): Number of output classes for the model. Output: nn.Module: The loaded PyTorch model set to evaluation mode on the appropriate device. \"\"\" # set the computation device modelPath = './models/' + model_name device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # load the model and the trained weights model = create_model ( num_classes = NUM_CLASSES ) . to ( device ) model . load_state_dict ( torch . load ( modelPath , map_location = device )) model . eval () return model def inferencing.saveResultsToCSV(csvFileName, results, OUT_DIR): Saves detection results to a CSV file with specified columns. Inputs csvFileName (str): Name of the CSV file (without extension) to save results. results (list of dict): List of detection result dictionaries containing keys 'image_name', 'boxes', 'classes', and 'scores'. OUT_DIR (str): Directory path where the CSV file will be saved. Output None: Writes the results to a CSV file at the specified location. Source code in library/inferencing.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def saveResultsToCSV ( csvFileName , results , OUT_DIR ): \"\"\" Saves detection results to a CSV file with specified columns. Inputs: csvFileName (str): Name of the CSV file (without extension) to save results. results (list of dict): List of detection result dictionaries containing keys 'image_name', 'boxes', 'classes', and 'scores'. OUT_DIR (str): Directory path where the CSV file will be saved. Output: None: Writes the results to a CSV file at the specified location. \"\"\" csv_path = os . path . join ( OUT_DIR , f \" { csvFileName } .csv\" ) # Open CSV file and write the data with open ( csv_path , 'w' , newline = '' ) as f : writer = csv . writer ( f , quoting = csv . QUOTE_ALL ) writer . writerow ([ 'Image Name' , 'Bounding Boxes' , 'Classes' , 'Scores' ]) # CSV Header for result in results : writer . writerow ([ result [ 'image_name' ], result [ 'boxes' ], result [ 'classes' ], result [ 'scores' ]]) def inferencing.inference_video(DIR_TEST, OUT_DIR, vidName, model, detection_threshold, CLASSES, save_detections=False): Runs object detection on a video, annotates detected objects frame-by-frame, optionally saves detected regions, and writes the annotated video to disk. Inputs DIR_TEST (str): Path to the input video file for inference. OUT_DIR (str): Directory where output video and detected regions (optional) will be saved. vidName (str): Filename for the output annotated video. model (torch.nn.Module): Trained object detection model. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model outputs. save_detections (bool, optional): If True, saves detected bounding box regions as separate images. Default is False. Outputs list: A list containing three elements for all frames: - bboxes (list): Detected bounding boxes per frame. - classes (list): Detected class labels per frame. - sscores (list): Detection scores per frame. Source code in library/inferencing.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def inference_video ( DIR_TEST , OUT_DIR , vidName , model , detection_threshold , CLASSES , save_detections = False ): \"\"\" Runs object detection on a video, annotates detected objects frame-by-frame, optionally saves detected regions, and writes the annotated video to disk. Inputs: DIR_TEST (str): Path to the input video file for inference. OUT_DIR (str): Directory where output video and detected regions (optional) will be saved. vidName (str): Filename for the output annotated video. model (torch.nn.Module): Trained object detection model. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model outputs. save_detections (bool, optional): If True, saves detected bounding box regions as separate images. Default is False. Outputs: list: A list containing three elements for all frames: - bboxes (list): Detected bounding boxes per frame. - classes (list): Detected class labels per frame. - sscores (list): Detection scores per frame. \"\"\" vid = cv2 . VideoCapture ( DIR_TEST ) property_id = int ( cv2 . CAP_PROP_FRAME_COUNT ) NUM_FRAMES = int ( cv2 . VideoCapture . get ( vid , property_id )) idx = 1 frame_width = int ( vid . get ( 3 )) frame_height = int ( vid . get ( 4 )) # Define the codec and create VideoWriter object.The output is stored in 'outpy.avi' file. out = cv2 . VideoWriter (( OUT_DIR + '/' + vidName ), cv2 . VideoWriter_fourcc ( 'M' , 'J' , 'P' , 'G' ), 30 , ( frame_width , frame_height )) classes = [ None ] * NUM_FRAMES bboxes = [ None ] * NUM_FRAMES sscores = [ None ] * NUM_FRAMES while vid . isOpened (): ret , image = vid . read () orig_image = image . copy () # BGR to RGB image = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) # make the pixel range between 0 and 1 image /= 255.0 # bring color channels to front image = np . transpose ( image , ( 2 , 0 , 1 )) . astype ( float ) # convert to tensor image = torch . tensor ( image , dtype = torch . float ) . cuda () # add batch dimension image = torch . unsqueeze ( image , 0 ) with torch . no_grad (): outputs = model ( image ) # load all detection to CPU for further operations outputs = [{ k : v . to ( 'cpu' ) for k , v in t . items ()} for t in outputs ] # carry further only if there are detected boxes if len ( outputs [ 0 ][ 'boxes' ]) != 0 : boxes = outputs [ 0 ][ 'boxes' ] . data . numpy () scores = outputs [ 0 ][ 'scores' ] . data . numpy () sscores [ idx ] = scores # filter out boxes according to `detection_threshold` boxes = boxes [ scores >= detection_threshold ] . astype ( np . int32 ) bboxes [ idx ] = boxes draw_boxes = bboxes [ idx ] . copy () # get all the predicited class names pred_classes = [ CLASSES [ i ] for i in outputs [ 0 ][ 'labels' ] . cpu () . numpy ()] pred_classes = np . array ( pred_classes ) pred_classes = pred_classes [ scores >= detection_threshold ] classes [ idx ] = pred_classes if ( save_detections ): for j , box in enumerate ( draw_boxes ): # Extract and save each detected region detected_region = orig_image [ box [ 1 ]: box [ 3 ], box [ 0 ]: box [ 2 ]] region_save_path = f \" { OUT_DIR } /frame_ { idx : 04d } _box_ { j : 02d } .png\" cv2 . imwrite ( region_save_path , detected_region ) # draw the bounding boxes and write the class name on top of it for j , box in enumerate ( draw_boxes ): cv2 . rectangle ( orig_image , ( int ( box [ 0 ]), int ( box [ 1 ])), ( int ( box [ 2 ]), int ( box [ 3 ])), ( 0 , 0 , 255 ), 2 ) cv2 . putText ( orig_image , str ( pred_classes [ j ]), ( int ( box [ 0 ]), int ( box [ 1 ] - 5 )), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 255 , 0 ), 2 , lineType = cv2 . LINE_AA ) out . write ( orig_image ) idx += 1 print ( f \"Image { idx + 1 } done...\" ) print ( '-' * 50 ) if idx == NUM_FRAMES : vid . release () out . release () print ( 'TEST PREDICTIONS COMPLETE' ) return [ bboxes , classes , sscores ] def inferencing.inference_images(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, inf_fig): Performs object detection on all images in a specified directory, annotates and saves the results, and records detection details for further analysis. Inputs DIR_TEST (str): Path to the directory containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory where annotated images and results CSV will be saved. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model output labels. tqdmBar (callable): Progress bar function for iterating over images. inf_fig (object): Visualization object used to display annotated images. Outputs list: A list of dictionaries, each containing: - 'image_name' (str): Filename of the image. - 'boxes' (list): Detected bounding boxes as lists of coordinates. - 'classes' (list): Predicted class labels. - 'scores' (list): Confidence scores for detections. Source code in library/inferencing.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 def inference_images ( DIR_TEST , model , OUT_DIR , detection_threshold , CLASSES , tqdmBar , inf_fig ): \"\"\" Performs object detection on all images in a specified directory, annotates and saves the results, and records detection details for further analysis. Inputs: DIR_TEST (str): Path to the directory containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory where annotated images and results CSV will be saved. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model output labels. tqdmBar (callable): Progress bar function for iterating over images. inf_fig (object): Visualization object used to display annotated images. Outputs: list: A list of dictionaries, each containing: - 'image_name' (str): Filename of the image. - 'boxes' (list): Detected bounding boxes as lists of coordinates. - 'classes' (list): Predicted class labels. - 'scores' (list): Confidence scores for detections. \"\"\" imagePath = glob . glob ( f \" { DIR_TEST } /*.png\" ) image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' , 'tif' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions for extension in all_extensions : imagePath . extend ( glob . glob ( f \" { DIR_TEST } /*. { extension } \" )) all_images = [ image_path . split ( '/' )[ - 1 ] for image_path in imagePath ] all_images = sorted ( all_images ) num_images = len ( all_images ) classes = [ None ] * num_images bboxes = [ None ] * num_images sscores = [ None ] * num_images # List to store results for CSV results = [] for idx in tqdmBar ( range ( 0 , num_images )): el = all_images [ idx ] orig_image = cv2 . imread ( DIR_TEST + '/' + el ) # BGR to RGB image = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) # make the pixel range between 0 and 1 image /= 255.0 # bring color channels to front image = np . transpose ( image , ( 2 , 0 , 1 )) . astype ( float ) # convert to tensor if torch . cuda . is_available (): image = torch . tensor ( image , dtype = torch . float ) . cuda () else : image = torch . tensor ( image , dtype = torch . float ) # add batch dimension image = torch . unsqueeze ( image , 0 ) with torch . no_grad (): outputs = model ( image ) # load all detection to CPU for further operations outputs = [{ k : v . to ( 'cpu' ) for k , v in t . items ()} for t in outputs ] # carry further only if there are detected boxes if len ( outputs [ 0 ][ 'boxes' ]) != 0 : boxes = outputs [ 0 ][ 'boxes' ] . data . numpy () scores = outputs [ 0 ][ 'scores' ] . data . numpy () sscores [ idx ] = scores [ scores >= detection_threshold ] # filter out boxes according to `detection_threshold` boxes = boxes [ scores >= detection_threshold ] . astype ( np . int32 ) bboxes [ idx ] = boxes draw_boxes = bboxes [ idx ] . copy () # get all the predicited class names pred_classes = [ CLASSES [ i ] for i in outputs [ 0 ][ 'labels' ] . cpu () . numpy ()] pred_classes = np . array ( pred_classes ) pred_classes = pred_classes [ scores >= detection_threshold ] classes [ idx ] = pred_classes # Store results for this image in the list results . append ({ 'image_name' : el , 'boxes' : boxes . tolist (), 'classes' : pred_classes . tolist (), 'scores' : sscores [ idx ] . tolist () }) # draw the bounding boxes and write the class name on top of it fig , ax = plt . subplots ( 1 , figsize = ( 4 , 4 )) ax . axis ( 'off' ) orig_image_rgb = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) plt . tight_layout () ax . imshow ( orig_image_rgb ) inf_fig . object = fig for j , box in enumerate ( draw_boxes ): cv2 . rectangle ( orig_image_rgb , ( int ( box [ 0 ]), int ( box [ 1 ])), ( int ( box [ 2 ]), int ( box [ 3 ])), ( 255 , 0 , 0 ), 5 ) cv2 . putText ( orig_image_rgb , str ( pred_classes [ j ]), ( int ( box [ 0 ]), int ( box [ 1 ] - 5 )), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 255 , 0 ), 2 , lineType = cv2 . LINE_AA ) writeOut = cv2 . cvtColor ( orig_image_rgb , cv2 . COLOR_RGB2BGR ) cv2 . imwrite ( OUT_DIR + '/' + el , writeOut ) #The 'el' filepath is broken right now (TODO: FIX) ax . axis ( 'off' ) # Remove the axis for cleaner visualization plt . tight_layout () ax . imshow ( orig_image_rgb ) # Update the inf_fig pane with the new figure inf_fig . object = fig plt . close () #print(f\"Image {idx+1} done...\") #print('-'*50) saveResultsToCSV ( 'inference_results' , results , OUT_DIR ) print ( 'TEST PREDICTIONS COMPLETE' ) return results def inferencing.load_and_preprocess_image(file_path, target_size=(800, 800)): Loads an image from disk, resizes it to a target size, converts it to RGB, normalizes pixel values, and transforms it into a PyTorch tensor suitable for model input. Inputs file_path (str): Path to the input image file. target_size (tuple): Desired output image size as (width, height). Default is (800, 800). Outputs tuple: A tuple containing: - image_tensor (torch.Tensor): Preprocessed image tensor of shape (3, target_height, target_width). - filename (str): The basename of the input image file. - original_size (tuple): Original image dimensions as (width, height). Source code in library/inferencing.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 def load_and_preprocess_image ( file_path , target_size = ( 800 , 800 )): \"\"\" Loads an image from disk, resizes it to a target size, converts it to RGB, normalizes pixel values, and transforms it into a PyTorch tensor suitable for model input. Inputs: file_path (str): Path to the input image file. target_size (tuple): Desired output image size as (width, height). Default is (800, 800). Outputs: tuple: A tuple containing: - image_tensor (torch.Tensor): Preprocessed image tensor of shape (3, target_height, target_width). - filename (str): The basename of the input image file. - original_size (tuple): Original image dimensions as (width, height). \"\"\" orig_image = cv2 . imread ( file_path ) orig_height , orig_width = orig_image . shape [: 2 ] resized_image = cv2 . resize ( orig_image , target_size ) # Resize to fixed size image_rgb = cv2 . cvtColor ( resized_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) / 255.0 image_tensor = torch . tensor ( np . transpose ( image_rgb , ( 2 , 0 , 1 )), dtype = torch . float ) return image_tensor , os . path . basename ( file_path ), ( orig_width , orig_height ) def inferencing.scale_boxes_to_original(boxes, original_size, resized_size=(800, 800)): Scales bounding box coordinates from a resized image back to the original image dimensions. Inputs boxes (array-like): Array of bounding boxes with coordinates [x_min, y_min, x_max, y_max] relative to the resized image. original_size (tuple): Original image size as (width, height). resized_size (tuple): Resized image size as (width, height). Default is (800, 800). Outputs numpy.ndarray: Array of bounding boxes scaled to the original image size. Source code in library/inferencing.py 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 def scale_boxes_to_original ( boxes , original_size , resized_size = ( 800 , 800 )): \"\"\" Scales bounding box coordinates from a resized image back to the original image dimensions. Inputs: boxes (array-like): Array of bounding boxes with coordinates [x_min, y_min, x_max, y_max] relative to the resized image. original_size (tuple): Original image size as (width, height). resized_size (tuple): Resized image size as (width, height). Default is (800, 800). Outputs: numpy.ndarray: Array of bounding boxes scaled to the original image size. \"\"\" orig_width , orig_height = original_size resized_width , resized_height = resized_size x_scale = orig_width / resized_width y_scale = orig_height / resized_height scaled_boxes = [] for box in boxes : x_min , y_min , x_max , y_max = box scaled_boxes . append ([ x_min * x_scale , y_min * y_scale , x_max * x_scale , y_max * y_scale ]) return np . array ( scaled_boxes ) def inferencing.inference_images_fast(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, batch_size=4): Performs batch inference on images in a directory using the provided model, with optional GPU acceleration. Inputs DIR_TEST (str): Directory path containing images for inference. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save inference results. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model labels. tqdmBar (iterable): Progress bar iterator for displaying progress. batch_size (int, optional): Number of images to process per batch. Default is 4. Outputs list of dict: Each dict contains image filename, bounding boxes (scaled to original image size), predicted classes, and detection scores for that image. Source code in library/inferencing.py 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 def inference_images_fast ( DIR_TEST , model , OUT_DIR , detection_threshold , CLASSES , tqdmBar , batch_size = 4 ): \"\"\" Performs batch inference on images in a directory using the provided model, with optional GPU acceleration. Inputs: DIR_TEST (str): Directory path containing images for inference. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save inference results. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model labels. tqdmBar (iterable): Progress bar iterator for displaying progress. batch_size (int, optional): Number of images to process per batch. Default is 4. Outputs: list of dict: Each dict contains image filename, bounding boxes (scaled to original image size), predicted classes, and detection scores for that image. \"\"\" # Collect all image paths image_extensions = [ 'png' , 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' ] all_image_paths = [] for ext in image_extensions + [ ext . upper () for ext in image_extensions ]: all_image_paths . extend ( glob . glob ( f \" { DIR_TEST } /*. { ext } \" )) all_image_paths = sorted ( all_image_paths ) # Prepare results list for annotations results = [] # Device setup device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) model . to ( device ) model . eval () # Process images in batches with ThreadPoolExecutor () as executor : for start_idx in tqdmBar ( range ( 0 , len ( all_image_paths ), batch_size ), desc = \"Inference Progress\" ): # Load images in parallel batch_paths = all_image_paths [ start_idx : start_idx + batch_size ] batch_data = list ( executor . map ( load_and_preprocess_image , batch_paths )) # Separate image tensors and filenames images , filenames , original_sizes = zip ( * batch_data ) images = torch . stack ( images ) . to ( device ) # Run inference with torch . no_grad (): outputs = model ( images ) # Process each image output for i , output in enumerate ( outputs ): scores = output [ 'scores' ] . cpu () . numpy () boxes = output [ 'boxes' ][ scores >= detection_threshold ] . cpu () . numpy () labels = output [ 'labels' ][ scores >= detection_threshold ] . cpu () . numpy () # Scale boxes back to original image size orig_size = original_sizes [ i ] scaled_boxes = scale_boxes_to_original ( boxes , orig_size ) # Store annotation results pred_classes = [ CLASSES [ label ] for label in labels ] result = { 'image_name' : filenames [ i ], 'boxes' : scaled_boxes . tolist (), 'classes' : pred_classes , 'scores' : scores [ scores >= detection_threshold ] . tolist () } results . append ( result ) # Save results to JSON or CSV saveResultsToCSV ( 'inference_results' , results , OUT_DIR ) print ( 'TEST PREDICTIONS COMPLETE' ) return results def inferencing.inference_images_figs(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES): Performs inference on images in a directory using the given model, annotates detected objects with bounding boxes and class labels, and overlays enlarged views of detected regions on the original images. Saves annotated images with bounding boxes and enlarged detected regions overlaid to OUT_DIR. Inputs DIR_TEST (str): Directory path containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save annotated output images. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model output labels. Outputs list: A list containing three elements: - bboxes (list): Detected bounding boxes per image. - classes (list): Predicted class labels per image. - sscores (list): Detection scores per image. Source code in library/inferencing.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 def inference_images_figs ( DIR_TEST , model , OUT_DIR , detection_threshold , CLASSES ): \"\"\" Performs inference on images in a directory using the given model, annotates detected objects with bounding boxes and class labels, and overlays enlarged views of detected regions on the original images. Saves annotated images with bounding boxes and enlarged detected regions overlaid to OUT_DIR. Inputs: DIR_TEST (str): Directory path containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save annotated output images. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model output labels. Outputs: list: A list containing three elements: - bboxes (list): Detected bounding boxes per image. - classes (list): Predicted class labels per image. - sscores (list): Detection scores per image. \"\"\" imagePath = glob . glob ( f \" { DIR_TEST } /*.png\" ) image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' , 'tif' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions for extension in all_extensions : imagePath . extend ( glob . glob ( f \" { DIR_TEST } /*. { extension } \" )) all_images = [ image_path . split ( '/' )[ - 1 ] for image_path in imagePath ] all_images = sorted ( all_images ) num_images = len ( all_images ) classes = [ None ] * num_images bboxes = [ None ] * num_images sscores = [ None ] * num_images for idx , el in enumerate ( all_images ): orig_image = cv2 . imread ( DIR_TEST + '/' + el ) # BGR to RGB image = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) # Normalize the pixel values (between 0 and 1) image /= 255.0 # Rearrange color channels image = np . transpose ( image , ( 2 , 0 , 1 )) . astype ( float ) # Convert to tensor image_tensor = torch . tensor ( image , dtype = torch . float ) . cuda () if torch . cuda . is_available () else torch . tensor ( image , dtype = torch . float ) # Add batch dimension image_tensor = torch . unsqueeze ( image_tensor , 0 ) with torch . no_grad (): outputs = model ( image_tensor ) outputs = [{ k : v . to ( 'cpu' ) for k , v in t . items ()} for t in outputs ] if len ( outputs [ 0 ][ 'boxes' ]) != 0 : boxes = outputs [ 0 ][ 'boxes' ] . data . numpy () scores = outputs [ 0 ][ 'scores' ] . data . numpy () sscores [ idx ] = scores [ scores >= detection_threshold ] boxes = boxes [ scores >= detection_threshold ] . astype ( np . int32 ) bboxes [ idx ] = boxes draw_boxes = boxes . copy () pred_classes = [ CLASSES [ i ] for i in outputs [ 0 ][ 'labels' ] . cpu () . numpy ()] pred_classes = np . array ( pred_classes ) pred_classes = pred_classes [ scores >= detection_threshold ] classes [ idx ] = pred_classes for j , box in enumerate ( draw_boxes ): x1 , y1 , x2 , y2 = box cv2 . rectangle ( orig_image , ( x1 , y1 ), ( x2 , y2 ), ( 0 , 0 , 255 ), 2 ) cv2 . putText ( orig_image , str ( pred_classes [ j ]), ( x1 , y1 - 5 ), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 255 , 0 ), 2 ) # Extract and enlarge the detected region detected_img = orig_image [ y1 : y2 , x1 : x2 ] factor = 2 # Change factor to desired zoom enlarged_img = cv2 . resize ( detected_img , None , fx = factor , fy = factor , interpolation = cv2 . INTER_LINEAR ) # Calculate where to place the enlarged image on the original eh , ew , _ = enlarged_img . shape ex , ey = 10 , 10 # Starting coordinates for the enlarged image (top left) # Ensure the enlarged image does not go out of the bounds of the original image if ey + eh > orig_image . shape [ 0 ]: ey = orig_image . shape [ 0 ] - eh if ex + ew > orig_image . shape [ 1 ]: ex = orig_image . shape [ 1 ] - ew # Overlay the enlarged image on the original image orig_image [ ey : ey + eh , ex : ex + ew ] = enlarged_img # Draw lines connecting the small and enlarged boxes cv2 . line ( orig_image , ( x1 , y1 ), ( ex , ey ), ( 255 , 0 , 0 ), 2 ) cv2 . line ( orig_image , ( x2 , y2 ), ( ex + ew , ey + eh ), ( 255 , 0 , 0 ), 2 ) cv2 . imwrite ( OUT_DIR + '/' + el , orig_image ) # Save the modified image print ( f \"Image { idx + 1 } done...\" ) print ( '-' * 50 ) print ( 'TEST PREDICTIONS COMPLETE' ) return [ bboxes , classes , sscores ]","title":"ez-frcnn.inferencing"},{"location":"inferencing/#ez-frcnninferencing","text":"def inferencing.load_model(model_name, MODEL_DIR, NUM_CLASSES): Loads a trained model from disk and prepares it for evaluation. Inputs model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory path where the model files are stored. NUM_CLASSES (int): Number of output classes for the model. Output nn.Module: The loaded PyTorch model set to evaluation mode on the appropriate device. Source code in library/inferencing.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def load_model ( model_name , MODEL_DIR , NUM_CLASSES ): \"\"\" Loads a trained model from disk and prepares it for evaluation. Inputs: model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory path where the model files are stored. NUM_CLASSES (int): Number of output classes for the model. Output: nn.Module: The loaded PyTorch model set to evaluation mode on the appropriate device. \"\"\" # set the computation device modelPath = './models/' + model_name device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # load the model and the trained weights model = create_model ( num_classes = NUM_CLASSES ) . to ( device ) model . load_state_dict ( torch . load ( modelPath , map_location = device )) model . eval () return model def inferencing.saveResultsToCSV(csvFileName, results, OUT_DIR): Saves detection results to a CSV file with specified columns. Inputs csvFileName (str): Name of the CSV file (without extension) to save results. results (list of dict): List of detection result dictionaries containing keys 'image_name', 'boxes', 'classes', and 'scores'. OUT_DIR (str): Directory path where the CSV file will be saved. Output None: Writes the results to a CSV file at the specified location. Source code in library/inferencing.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def saveResultsToCSV ( csvFileName , results , OUT_DIR ): \"\"\" Saves detection results to a CSV file with specified columns. Inputs: csvFileName (str): Name of the CSV file (without extension) to save results. results (list of dict): List of detection result dictionaries containing keys 'image_name', 'boxes', 'classes', and 'scores'. OUT_DIR (str): Directory path where the CSV file will be saved. Output: None: Writes the results to a CSV file at the specified location. \"\"\" csv_path = os . path . join ( OUT_DIR , f \" { csvFileName } .csv\" ) # Open CSV file and write the data with open ( csv_path , 'w' , newline = '' ) as f : writer = csv . writer ( f , quoting = csv . QUOTE_ALL ) writer . writerow ([ 'Image Name' , 'Bounding Boxes' , 'Classes' , 'Scores' ]) # CSV Header for result in results : writer . writerow ([ result [ 'image_name' ], result [ 'boxes' ], result [ 'classes' ], result [ 'scores' ]]) def inferencing.inference_video(DIR_TEST, OUT_DIR, vidName, model, detection_threshold, CLASSES, save_detections=False): Runs object detection on a video, annotates detected objects frame-by-frame, optionally saves detected regions, and writes the annotated video to disk. Inputs DIR_TEST (str): Path to the input video file for inference. OUT_DIR (str): Directory where output video and detected regions (optional) will be saved. vidName (str): Filename for the output annotated video. model (torch.nn.Module): Trained object detection model. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model outputs. save_detections (bool, optional): If True, saves detected bounding box regions as separate images. Default is False. Outputs list: A list containing three elements for all frames: - bboxes (list): Detected bounding boxes per frame. - classes (list): Detected class labels per frame. - sscores (list): Detection scores per frame. Source code in library/inferencing.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def inference_video ( DIR_TEST , OUT_DIR , vidName , model , detection_threshold , CLASSES , save_detections = False ): \"\"\" Runs object detection on a video, annotates detected objects frame-by-frame, optionally saves detected regions, and writes the annotated video to disk. Inputs: DIR_TEST (str): Path to the input video file for inference. OUT_DIR (str): Directory where output video and detected regions (optional) will be saved. vidName (str): Filename for the output annotated video. model (torch.nn.Module): Trained object detection model. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model outputs. save_detections (bool, optional): If True, saves detected bounding box regions as separate images. Default is False. Outputs: list: A list containing three elements for all frames: - bboxes (list): Detected bounding boxes per frame. - classes (list): Detected class labels per frame. - sscores (list): Detection scores per frame. \"\"\" vid = cv2 . VideoCapture ( DIR_TEST ) property_id = int ( cv2 . CAP_PROP_FRAME_COUNT ) NUM_FRAMES = int ( cv2 . VideoCapture . get ( vid , property_id )) idx = 1 frame_width = int ( vid . get ( 3 )) frame_height = int ( vid . get ( 4 )) # Define the codec and create VideoWriter object.The output is stored in 'outpy.avi' file. out = cv2 . VideoWriter (( OUT_DIR + '/' + vidName ), cv2 . VideoWriter_fourcc ( 'M' , 'J' , 'P' , 'G' ), 30 , ( frame_width , frame_height )) classes = [ None ] * NUM_FRAMES bboxes = [ None ] * NUM_FRAMES sscores = [ None ] * NUM_FRAMES while vid . isOpened (): ret , image = vid . read () orig_image = image . copy () # BGR to RGB image = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) # make the pixel range between 0 and 1 image /= 255.0 # bring color channels to front image = np . transpose ( image , ( 2 , 0 , 1 )) . astype ( float ) # convert to tensor image = torch . tensor ( image , dtype = torch . float ) . cuda () # add batch dimension image = torch . unsqueeze ( image , 0 ) with torch . no_grad (): outputs = model ( image ) # load all detection to CPU for further operations outputs = [{ k : v . to ( 'cpu' ) for k , v in t . items ()} for t in outputs ] # carry further only if there are detected boxes if len ( outputs [ 0 ][ 'boxes' ]) != 0 : boxes = outputs [ 0 ][ 'boxes' ] . data . numpy () scores = outputs [ 0 ][ 'scores' ] . data . numpy () sscores [ idx ] = scores # filter out boxes according to `detection_threshold` boxes = boxes [ scores >= detection_threshold ] . astype ( np . int32 ) bboxes [ idx ] = boxes draw_boxes = bboxes [ idx ] . copy () # get all the predicited class names pred_classes = [ CLASSES [ i ] for i in outputs [ 0 ][ 'labels' ] . cpu () . numpy ()] pred_classes = np . array ( pred_classes ) pred_classes = pred_classes [ scores >= detection_threshold ] classes [ idx ] = pred_classes if ( save_detections ): for j , box in enumerate ( draw_boxes ): # Extract and save each detected region detected_region = orig_image [ box [ 1 ]: box [ 3 ], box [ 0 ]: box [ 2 ]] region_save_path = f \" { OUT_DIR } /frame_ { idx : 04d } _box_ { j : 02d } .png\" cv2 . imwrite ( region_save_path , detected_region ) # draw the bounding boxes and write the class name on top of it for j , box in enumerate ( draw_boxes ): cv2 . rectangle ( orig_image , ( int ( box [ 0 ]), int ( box [ 1 ])), ( int ( box [ 2 ]), int ( box [ 3 ])), ( 0 , 0 , 255 ), 2 ) cv2 . putText ( orig_image , str ( pred_classes [ j ]), ( int ( box [ 0 ]), int ( box [ 1 ] - 5 )), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 255 , 0 ), 2 , lineType = cv2 . LINE_AA ) out . write ( orig_image ) idx += 1 print ( f \"Image { idx + 1 } done...\" ) print ( '-' * 50 ) if idx == NUM_FRAMES : vid . release () out . release () print ( 'TEST PREDICTIONS COMPLETE' ) return [ bboxes , classes , sscores ] def inferencing.inference_images(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, inf_fig): Performs object detection on all images in a specified directory, annotates and saves the results, and records detection details for further analysis. Inputs DIR_TEST (str): Path to the directory containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory where annotated images and results CSV will be saved. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model output labels. tqdmBar (callable): Progress bar function for iterating over images. inf_fig (object): Visualization object used to display annotated images. Outputs list: A list of dictionaries, each containing: - 'image_name' (str): Filename of the image. - 'boxes' (list): Detected bounding boxes as lists of coordinates. - 'classes' (list): Predicted class labels. - 'scores' (list): Confidence scores for detections. Source code in library/inferencing.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 def inference_images ( DIR_TEST , model , OUT_DIR , detection_threshold , CLASSES , tqdmBar , inf_fig ): \"\"\" Performs object detection on all images in a specified directory, annotates and saves the results, and records detection details for further analysis. Inputs: DIR_TEST (str): Path to the directory containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory where annotated images and results CSV will be saved. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list): List of class names corresponding to model output labels. tqdmBar (callable): Progress bar function for iterating over images. inf_fig (object): Visualization object used to display annotated images. Outputs: list: A list of dictionaries, each containing: - 'image_name' (str): Filename of the image. - 'boxes' (list): Detected bounding boxes as lists of coordinates. - 'classes' (list): Predicted class labels. - 'scores' (list): Confidence scores for detections. \"\"\" imagePath = glob . glob ( f \" { DIR_TEST } /*.png\" ) image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' , 'tif' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions for extension in all_extensions : imagePath . extend ( glob . glob ( f \" { DIR_TEST } /*. { extension } \" )) all_images = [ image_path . split ( '/' )[ - 1 ] for image_path in imagePath ] all_images = sorted ( all_images ) num_images = len ( all_images ) classes = [ None ] * num_images bboxes = [ None ] * num_images sscores = [ None ] * num_images # List to store results for CSV results = [] for idx in tqdmBar ( range ( 0 , num_images )): el = all_images [ idx ] orig_image = cv2 . imread ( DIR_TEST + '/' + el ) # BGR to RGB image = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) # make the pixel range between 0 and 1 image /= 255.0 # bring color channels to front image = np . transpose ( image , ( 2 , 0 , 1 )) . astype ( float ) # convert to tensor if torch . cuda . is_available (): image = torch . tensor ( image , dtype = torch . float ) . cuda () else : image = torch . tensor ( image , dtype = torch . float ) # add batch dimension image = torch . unsqueeze ( image , 0 ) with torch . no_grad (): outputs = model ( image ) # load all detection to CPU for further operations outputs = [{ k : v . to ( 'cpu' ) for k , v in t . items ()} for t in outputs ] # carry further only if there are detected boxes if len ( outputs [ 0 ][ 'boxes' ]) != 0 : boxes = outputs [ 0 ][ 'boxes' ] . data . numpy () scores = outputs [ 0 ][ 'scores' ] . data . numpy () sscores [ idx ] = scores [ scores >= detection_threshold ] # filter out boxes according to `detection_threshold` boxes = boxes [ scores >= detection_threshold ] . astype ( np . int32 ) bboxes [ idx ] = boxes draw_boxes = bboxes [ idx ] . copy () # get all the predicited class names pred_classes = [ CLASSES [ i ] for i in outputs [ 0 ][ 'labels' ] . cpu () . numpy ()] pred_classes = np . array ( pred_classes ) pred_classes = pred_classes [ scores >= detection_threshold ] classes [ idx ] = pred_classes # Store results for this image in the list results . append ({ 'image_name' : el , 'boxes' : boxes . tolist (), 'classes' : pred_classes . tolist (), 'scores' : sscores [ idx ] . tolist () }) # draw the bounding boxes and write the class name on top of it fig , ax = plt . subplots ( 1 , figsize = ( 4 , 4 )) ax . axis ( 'off' ) orig_image_rgb = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) plt . tight_layout () ax . imshow ( orig_image_rgb ) inf_fig . object = fig for j , box in enumerate ( draw_boxes ): cv2 . rectangle ( orig_image_rgb , ( int ( box [ 0 ]), int ( box [ 1 ])), ( int ( box [ 2 ]), int ( box [ 3 ])), ( 255 , 0 , 0 ), 5 ) cv2 . putText ( orig_image_rgb , str ( pred_classes [ j ]), ( int ( box [ 0 ]), int ( box [ 1 ] - 5 )), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 255 , 0 ), 2 , lineType = cv2 . LINE_AA ) writeOut = cv2 . cvtColor ( orig_image_rgb , cv2 . COLOR_RGB2BGR ) cv2 . imwrite ( OUT_DIR + '/' + el , writeOut ) #The 'el' filepath is broken right now (TODO: FIX) ax . axis ( 'off' ) # Remove the axis for cleaner visualization plt . tight_layout () ax . imshow ( orig_image_rgb ) # Update the inf_fig pane with the new figure inf_fig . object = fig plt . close () #print(f\"Image {idx+1} done...\") #print('-'*50) saveResultsToCSV ( 'inference_results' , results , OUT_DIR ) print ( 'TEST PREDICTIONS COMPLETE' ) return results def inferencing.load_and_preprocess_image(file_path, target_size=(800, 800)): Loads an image from disk, resizes it to a target size, converts it to RGB, normalizes pixel values, and transforms it into a PyTorch tensor suitable for model input. Inputs file_path (str): Path to the input image file. target_size (tuple): Desired output image size as (width, height). Default is (800, 800). Outputs tuple: A tuple containing: - image_tensor (torch.Tensor): Preprocessed image tensor of shape (3, target_height, target_width). - filename (str): The basename of the input image file. - original_size (tuple): Original image dimensions as (width, height). Source code in library/inferencing.py 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 def load_and_preprocess_image ( file_path , target_size = ( 800 , 800 )): \"\"\" Loads an image from disk, resizes it to a target size, converts it to RGB, normalizes pixel values, and transforms it into a PyTorch tensor suitable for model input. Inputs: file_path (str): Path to the input image file. target_size (tuple): Desired output image size as (width, height). Default is (800, 800). Outputs: tuple: A tuple containing: - image_tensor (torch.Tensor): Preprocessed image tensor of shape (3, target_height, target_width). - filename (str): The basename of the input image file. - original_size (tuple): Original image dimensions as (width, height). \"\"\" orig_image = cv2 . imread ( file_path ) orig_height , orig_width = orig_image . shape [: 2 ] resized_image = cv2 . resize ( orig_image , target_size ) # Resize to fixed size image_rgb = cv2 . cvtColor ( resized_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) / 255.0 image_tensor = torch . tensor ( np . transpose ( image_rgb , ( 2 , 0 , 1 )), dtype = torch . float ) return image_tensor , os . path . basename ( file_path ), ( orig_width , orig_height ) def inferencing.scale_boxes_to_original(boxes, original_size, resized_size=(800, 800)): Scales bounding box coordinates from a resized image back to the original image dimensions. Inputs boxes (array-like): Array of bounding boxes with coordinates [x_min, y_min, x_max, y_max] relative to the resized image. original_size (tuple): Original image size as (width, height). resized_size (tuple): Resized image size as (width, height). Default is (800, 800). Outputs numpy.ndarray: Array of bounding boxes scaled to the original image size. Source code in library/inferencing.py 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 def scale_boxes_to_original ( boxes , original_size , resized_size = ( 800 , 800 )): \"\"\" Scales bounding box coordinates from a resized image back to the original image dimensions. Inputs: boxes (array-like): Array of bounding boxes with coordinates [x_min, y_min, x_max, y_max] relative to the resized image. original_size (tuple): Original image size as (width, height). resized_size (tuple): Resized image size as (width, height). Default is (800, 800). Outputs: numpy.ndarray: Array of bounding boxes scaled to the original image size. \"\"\" orig_width , orig_height = original_size resized_width , resized_height = resized_size x_scale = orig_width / resized_width y_scale = orig_height / resized_height scaled_boxes = [] for box in boxes : x_min , y_min , x_max , y_max = box scaled_boxes . append ([ x_min * x_scale , y_min * y_scale , x_max * x_scale , y_max * y_scale ]) return np . array ( scaled_boxes ) def inferencing.inference_images_fast(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, batch_size=4): Performs batch inference on images in a directory using the provided model, with optional GPU acceleration. Inputs DIR_TEST (str): Directory path containing images for inference. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save inference results. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model labels. tqdmBar (iterable): Progress bar iterator for displaying progress. batch_size (int, optional): Number of images to process per batch. Default is 4. Outputs list of dict: Each dict contains image filename, bounding boxes (scaled to original image size), predicted classes, and detection scores for that image. Source code in library/inferencing.py 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 def inference_images_fast ( DIR_TEST , model , OUT_DIR , detection_threshold , CLASSES , tqdmBar , batch_size = 4 ): \"\"\" Performs batch inference on images in a directory using the provided model, with optional GPU acceleration. Inputs: DIR_TEST (str): Directory path containing images for inference. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save inference results. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model labels. tqdmBar (iterable): Progress bar iterator for displaying progress. batch_size (int, optional): Number of images to process per batch. Default is 4. Outputs: list of dict: Each dict contains image filename, bounding boxes (scaled to original image size), predicted classes, and detection scores for that image. \"\"\" # Collect all image paths image_extensions = [ 'png' , 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' ] all_image_paths = [] for ext in image_extensions + [ ext . upper () for ext in image_extensions ]: all_image_paths . extend ( glob . glob ( f \" { DIR_TEST } /*. { ext } \" )) all_image_paths = sorted ( all_image_paths ) # Prepare results list for annotations results = [] # Device setup device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) model . to ( device ) model . eval () # Process images in batches with ThreadPoolExecutor () as executor : for start_idx in tqdmBar ( range ( 0 , len ( all_image_paths ), batch_size ), desc = \"Inference Progress\" ): # Load images in parallel batch_paths = all_image_paths [ start_idx : start_idx + batch_size ] batch_data = list ( executor . map ( load_and_preprocess_image , batch_paths )) # Separate image tensors and filenames images , filenames , original_sizes = zip ( * batch_data ) images = torch . stack ( images ) . to ( device ) # Run inference with torch . no_grad (): outputs = model ( images ) # Process each image output for i , output in enumerate ( outputs ): scores = output [ 'scores' ] . cpu () . numpy () boxes = output [ 'boxes' ][ scores >= detection_threshold ] . cpu () . numpy () labels = output [ 'labels' ][ scores >= detection_threshold ] . cpu () . numpy () # Scale boxes back to original image size orig_size = original_sizes [ i ] scaled_boxes = scale_boxes_to_original ( boxes , orig_size ) # Store annotation results pred_classes = [ CLASSES [ label ] for label in labels ] result = { 'image_name' : filenames [ i ], 'boxes' : scaled_boxes . tolist (), 'classes' : pred_classes , 'scores' : scores [ scores >= detection_threshold ] . tolist () } results . append ( result ) # Save results to JSON or CSV saveResultsToCSV ( 'inference_results' , results , OUT_DIR ) print ( 'TEST PREDICTIONS COMPLETE' ) return results def inferencing.inference_images_figs(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES): Performs inference on images in a directory using the given model, annotates detected objects with bounding boxes and class labels, and overlays enlarged views of detected regions on the original images. Saves annotated images with bounding boxes and enlarged detected regions overlaid to OUT_DIR. Inputs DIR_TEST (str): Directory path containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save annotated output images. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model output labels. Outputs list: A list containing three elements: - bboxes (list): Detected bounding boxes per image. - classes (list): Predicted class labels per image. - sscores (list): Detection scores per image. Source code in library/inferencing.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 def inference_images_figs ( DIR_TEST , model , OUT_DIR , detection_threshold , CLASSES ): \"\"\" Performs inference on images in a directory using the given model, annotates detected objects with bounding boxes and class labels, and overlays enlarged views of detected regions on the original images. Saves annotated images with bounding boxes and enlarged detected regions overlaid to OUT_DIR. Inputs: DIR_TEST (str): Directory path containing input images. model (torch.nn.Module): Trained object detection model. OUT_DIR (str): Directory path to save annotated output images. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list): List of class names corresponding to model output labels. Outputs: list: A list containing three elements: - bboxes (list): Detected bounding boxes per image. - classes (list): Predicted class labels per image. - sscores (list): Detection scores per image. \"\"\" imagePath = glob . glob ( f \" { DIR_TEST } /*.png\" ) image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' , 'tif' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions for extension in all_extensions : imagePath . extend ( glob . glob ( f \" { DIR_TEST } /*. { extension } \" )) all_images = [ image_path . split ( '/' )[ - 1 ] for image_path in imagePath ] all_images = sorted ( all_images ) num_images = len ( all_images ) classes = [ None ] * num_images bboxes = [ None ] * num_images sscores = [ None ] * num_images for idx , el in enumerate ( all_images ): orig_image = cv2 . imread ( DIR_TEST + '/' + el ) # BGR to RGB image = cv2 . cvtColor ( orig_image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) # Normalize the pixel values (between 0 and 1) image /= 255.0 # Rearrange color channels image = np . transpose ( image , ( 2 , 0 , 1 )) . astype ( float ) # Convert to tensor image_tensor = torch . tensor ( image , dtype = torch . float ) . cuda () if torch . cuda . is_available () else torch . tensor ( image , dtype = torch . float ) # Add batch dimension image_tensor = torch . unsqueeze ( image_tensor , 0 ) with torch . no_grad (): outputs = model ( image_tensor ) outputs = [{ k : v . to ( 'cpu' ) for k , v in t . items ()} for t in outputs ] if len ( outputs [ 0 ][ 'boxes' ]) != 0 : boxes = outputs [ 0 ][ 'boxes' ] . data . numpy () scores = outputs [ 0 ][ 'scores' ] . data . numpy () sscores [ idx ] = scores [ scores >= detection_threshold ] boxes = boxes [ scores >= detection_threshold ] . astype ( np . int32 ) bboxes [ idx ] = boxes draw_boxes = boxes . copy () pred_classes = [ CLASSES [ i ] for i in outputs [ 0 ][ 'labels' ] . cpu () . numpy ()] pred_classes = np . array ( pred_classes ) pred_classes = pred_classes [ scores >= detection_threshold ] classes [ idx ] = pred_classes for j , box in enumerate ( draw_boxes ): x1 , y1 , x2 , y2 = box cv2 . rectangle ( orig_image , ( x1 , y1 ), ( x2 , y2 ), ( 0 , 0 , 255 ), 2 ) cv2 . putText ( orig_image , str ( pred_classes [ j ]), ( x1 , y1 - 5 ), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 255 , 0 ), 2 ) # Extract and enlarge the detected region detected_img = orig_image [ y1 : y2 , x1 : x2 ] factor = 2 # Change factor to desired zoom enlarged_img = cv2 . resize ( detected_img , None , fx = factor , fy = factor , interpolation = cv2 . INTER_LINEAR ) # Calculate where to place the enlarged image on the original eh , ew , _ = enlarged_img . shape ex , ey = 10 , 10 # Starting coordinates for the enlarged image (top left) # Ensure the enlarged image does not go out of the bounds of the original image if ey + eh > orig_image . shape [ 0 ]: ey = orig_image . shape [ 0 ] - eh if ex + ew > orig_image . shape [ 1 ]: ex = orig_image . shape [ 1 ] - ew # Overlay the enlarged image on the original image orig_image [ ey : ey + eh , ex : ex + ew ] = enlarged_img # Draw lines connecting the small and enlarged boxes cv2 . line ( orig_image , ( x1 , y1 ), ( ex , ey ), ( 255 , 0 , 0 ), 2 ) cv2 . line ( orig_image , ( x2 , y2 ), ( ex + ew , ey + eh ), ( 255 , 0 , 0 ), 2 ) cv2 . imwrite ( OUT_DIR + '/' + el , orig_image ) # Save the modified image print ( f \"Image { idx + 1 } done...\" ) print ( '-' * 50 ) print ( 'TEST PREDICTIONS COMPLETE' ) return [ bboxes , classes , sscores ]","title":"ez-frcnn.inferencing"},{"location":"plotting/","text":"ez-frcnn.plotting def plotting.visualize_sample(TRAIN_DIR, RESIZE_TO, index): Visualizes a single sample image with annotated bounding boxes and class labels from a dataset. Inputs TRAIN_DIR (str): Directory path containing training images and annotations. RESIZE_TO (int): Size (width and height) to which images are resized. index (int): Index of the sample image in the dataset to visualize. Outputs matplotlib.figure.Figure: Figure object displaying the image with bounding boxes and labels. Source code in library/plotting.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def visualize_sample ( TRAIN_DIR , RESIZE_TO , index ): \"\"\" Visualizes a single sample image with annotated bounding boxes and class labels from a dataset. Inputs: TRAIN_DIR (str): Directory path containing training images and annotations. RESIZE_TO (int): Size (width and height) to which images are resized. index (int): Index of the sample image in the dataset to visualize. Outputs: matplotlib.figure.Figure: Figure object displaying the image with bounding boxes and labels. \"\"\" dataset = getDataset ( TRAIN_DIR , RESIZE_TO , RESIZE_TO ) image , target = dataset [ index ] fig = plt . figure ( figsize = ( 4 , 4 )) ax = fig . subplots () ax . axis ( 'off' ) # This hides both the axes and the ticks plt . tight_layout () # This automatically adjusts the padding for i in range ( 0 , len ( target [ 'boxes' ])): box = target [ 'boxes' ][ i ] classesBG = dataset . classes label = classesBG [ target [ 'labels' ][ i ] . item ()] cv2 . rectangle ( image , ( int ( box [ 0 ]), int ( box [ 1 ])), ( int ( box [ 2 ]), int ( box [ 3 ])), ( 0 , 255 , 0 ), 1 ) cv2 . putText ( image , label , ( int ( box [ 0 ]), int ( box [ 1 ] - 5 )), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 0 , 255 ), 2 ) plt . imshow ( image ) return fig","title":"ez-frcnn.plotting"},{"location":"plotting/#ez-frcnnplotting","text":"def plotting.visualize_sample(TRAIN_DIR, RESIZE_TO, index): Visualizes a single sample image with annotated bounding boxes and class labels from a dataset. Inputs TRAIN_DIR (str): Directory path containing training images and annotations. RESIZE_TO (int): Size (width and height) to which images are resized. index (int): Index of the sample image in the dataset to visualize. Outputs matplotlib.figure.Figure: Figure object displaying the image with bounding boxes and labels. Source code in library/plotting.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def visualize_sample ( TRAIN_DIR , RESIZE_TO , index ): \"\"\" Visualizes a single sample image with annotated bounding boxes and class labels from a dataset. Inputs: TRAIN_DIR (str): Directory path containing training images and annotations. RESIZE_TO (int): Size (width and height) to which images are resized. index (int): Index of the sample image in the dataset to visualize. Outputs: matplotlib.figure.Figure: Figure object displaying the image with bounding boxes and labels. \"\"\" dataset = getDataset ( TRAIN_DIR , RESIZE_TO , RESIZE_TO ) image , target = dataset [ index ] fig = plt . figure ( figsize = ( 4 , 4 )) ax = fig . subplots () ax . axis ( 'off' ) # This hides both the axes and the ticks plt . tight_layout () # This automatically adjusts the padding for i in range ( 0 , len ( target [ 'boxes' ])): box = target [ 'boxes' ][ i ] classesBG = dataset . classes label = classesBG [ target [ 'labels' ][ i ] . item ()] cv2 . rectangle ( image , ( int ( box [ 0 ]), int ( box [ 1 ])), ( int ( box [ 2 ]), int ( box [ 3 ])), ( 0 , 255 , 0 ), 1 ) cv2 . putText ( image , label , ( int ( box [ 0 ]), int ( box [ 1 ] - 5 )), cv2 . FONT_HERSHEY_SIMPLEX , 0.7 , ( 0 , 0 , 255 ), 2 ) plt . imshow ( image ) return fig","title":"ez-frcnn.plotting"},{"location":"training/","text":"ez-frcnn.training def training.create_model(num_classes): Creates a Faster R-CNN model pre-trained on COCO and modifies its head for a custom number of classes. Inputs num_classes (int): Number of output classes for detection (including background). Outputs torchvision.models.detection.FasterRCNN: The modified Faster R-CNN model ready for training or inference. Source code in library/training.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def create_model ( num_classes ): \"\"\" Creates a Faster R-CNN model pre-trained on COCO and modifies its head for a custom number of classes. Inputs: num_classes (int): Number of output classes for detection (including background). Outputs: torchvision.models.detection.FasterRCNN: The modified Faster R-CNN model ready for training or inference. \"\"\" # load Faster RCNN pre-trained model model = torchvision . models . detection . fasterrcnn_resnet50_fpn_v2 ( weights = 'COCO_V1' ) # get the number of input features in_features = model . roi_heads . box_predictor . cls_score . in_features # define a new head for the detector with required number of classes model . roi_heads . box_predictor = FastRCNNPredictor ( in_features , num_classes ) return model def training.load_model_train(model_name, MODEL_DIR, NUM_CLASSES): Loads a trained model for inference or further training. Inputs model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory where the model weights are stored. NUM_CLASSES (int): Number of output classes the model predicts. Outputs torch.nn.Module: The model loaded with trained weights, moved to the appropriate device (CPU or GPU). Source code in library/training.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def load_model_train ( model_name , MODEL_DIR , NUM_CLASSES ): \"\"\" Loads a trained model for inference or further training. Inputs: model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory where the model weights are stored. NUM_CLASSES (int): Number of output classes the model predicts. Outputs: torch.nn.Module: The model loaded with trained weights, moved to the appropriate device (CPU or GPU). \"\"\" # set the computation device modelPath = './models/' + model_name device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # load the model and the trained weights model = create_model ( num_classes = NUM_CLASSES ) . to ( device ) model . load_state_dict ( torch . load ( modelPath , map_location = device )) return model def training.train(train_data_loader, model, optimizer, train_loss_list, train_loss_hist, train_itr, DEVICE): Performs one epoch of training on the provided model. Inputs train_data_loader (DataLoader): Iterable over training dataset batches. model (torch.nn.Module): The model to train. optimizer (torch.optim.Optimizer): Optimizer used for updating model weights. train_loss_list (list): List to store loss values per iteration. train_loss_hist (generator): Generator to track or log loss history. train_itr (int): Current training iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs train_loss_list (list): Updated list of training loss values. Source code in library/training.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def train ( train_data_loader , model , optimizer , train_loss_list , train_loss_hist , train_itr , DEVICE ): \"\"\" Performs one epoch of training on the provided model. Inputs: train_data_loader (DataLoader): Iterable over training dataset batches. model (torch.nn.Module): The model to train. optimizer (torch.optim.Optimizer): Optimizer used for updating model weights. train_loss_list (list): List to store loss values per iteration. train_loss_hist (generator): Generator to track or log loss history. train_itr (int): Current training iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs: train_loss_list (list): Updated list of training loss values. \"\"\" print ( 'Training' ) #global train_itr # initialize tqdm progress bar #prog_bar = Tqdm(train_data_loader, total=len(train_data_loader)) for i , data in enumerate ( train_data_loader ): optimizer . zero_grad () images , targets = data images = list ( image . to ( DEVICE ) for image in images ) targets = [{ k : v . to ( DEVICE ) for k , v in t . items ()} for t in targets ] loss_dict = model ( images , targets ) losses = sum ( loss for loss in loss_dict . values ()) loss_value = losses . item () train_loss_list . append ( loss_value ) train_loss_hist . send ( loss_value ) losses . backward () optimizer . step () train_itr += 1 # update the loss value beside the progress bar for each iteration #prog_bar.set_description(desc=f\"Loss: {loss_value:.4f}\") return train_loss_list def training.validate(valid_data_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE): Performs one epoch of validation on the provided model. Inputs valid_data_loader (DataLoader): Iterable over validation dataset batches. model (torch.nn.Module): The model to validate. val_loss_list (list): List to store validation loss values per iteration. val_loss_hist (generator): Generator to track or log validation loss history. val_itr (int): Current validation iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs val_loss_list (list): Updated list of validation loss values. Source code in library/training.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def validate ( valid_data_loader , model , val_loss_list , val_loss_hist , val_itr , DEVICE ): \"\"\" Performs one epoch of validation on the provided model. Inputs: valid_data_loader (DataLoader): Iterable over validation dataset batches. model (torch.nn.Module): The model to validate. val_loss_list (list): List to store validation loss values per iteration. val_loss_hist (generator): Generator to track or log validation loss history. val_itr (int): Current validation iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs: val_loss_list (list): Updated list of validation loss values. \"\"\" print ( 'Validating' ) #global val_itr # initialize tqdm progress bar #prog_bar = tqdm(valid_data_loader, total=len(valid_data_loader)) for i , data in enumerate ( valid_data_loader ): images , targets = data images = list ( image . to ( DEVICE ) for image in images ) targets = [{ k : v . to ( DEVICE ) for k , v in t . items ()} for t in targets ] with torch . no_grad (): loss_dict = model ( images , targets ) losses = sum ( loss for loss in loss_dict . values ()) loss_value = losses . item () val_loss_list . append ( loss_value ) val_loss_hist . send ( loss_value ) val_itr += 1 # update the loss value beside the progress bar for each iteration #prog_bar.set_description(desc=f\"Loss: {loss_value:.4f}\") return val_loss_list def training.train_model(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH, tqdm_all, train_loss_mpl): Train a given PyTorch model with training and validation datasets, periodically saving model checkpoints and loss plots. Inputs model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset. DEVICE (torch.device): Device on which to run training (CPU or GPU). MODEL_NAME (str): Base name for saving model checkpoints. NUM_EPOCHS (int): Total number of epochs for training. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training/validation loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save the loss plots. tqdm_all (iterable): Iterable (e.g., tqdm wrapper) for epoch iteration. train_loss_mpl (Panel object): Matplotlib figure holder for live loss plot updates. Output list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Loss values for all validation iterations. Source code in library/training.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 def train_model ( model , train_loader , valid_loader , DEVICE , MODEL_NAME , NUM_EPOCHS , OUT_DIR , PLOT_DIR , SAVE_MODEL_EPOCH , SAVE_PLOTS_EPOCH , tqdm_all , train_loss_mpl ): \"\"\" Train a given PyTorch model with training and validation datasets, periodically saving model checkpoints and loss plots. Inputs: model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset. DEVICE (torch.device): Device on which to run training (CPU or GPU). MODEL_NAME (str): Base name for saving model checkpoints. NUM_EPOCHS (int): Total number of epochs for training. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training/validation loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save the loss plots. tqdm_all (iterable): Iterable (e.g., tqdm wrapper) for epoch iteration. train_loss_mpl (Panel object): Matplotlib figure holder for live loss plot updates. Output: list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Loss values for all validation iterations. \"\"\" model = model . to ( DEVICE ) # get the model parameters params = [ p for p in model . parameters () if p . requires_grad ] # define the optimizer optimizer = torch . optim . SGD ( params , lr = 0.001 , momentum = 0.9 , weight_decay = 0.0005 ) # initialize the Averager class train_loss_hist = Averager () val_loss_hist = Averager () train_itr = 1 val_itr = 1 # train and validation loss lists to store loss values of all... # ... iterations till ena and plot graphs for all iterations train_loss_list = [] train_loss_plot_list = [] val_loss_list = [] val_loss_plot_list = [] for epoch , data in enumerate ( tqdm_all ): print ( f \" \\n EPOCH { epoch + 1 } of { NUM_EPOCHS } \" ) # reset the training and validation loss histories for the current epoch train_loss_hist . reset () val_loss_hist . reset () # create two subplots, one for each, training and validation figure_1 , train_ax = plt . subplots () figure_2 , valid_ax = plt . subplots () figure , ax = plt . subplots ( figsize = ( 4 , 4 )) # Make the figure smaller (6x4 inches) # start timer and carry out training and validation start = time . time () train_loss = train ( train_loader , model , optimizer , train_loss_list , train_loss_hist , train_itr , DEVICE ) val_loss = validate ( valid_loader , model , val_loss_list , val_loss_hist , val_itr , DEVICE ) print ( f \"Epoch # { epoch } train loss: { train_loss_hist . value : .3f } \" ) print ( f \"Epoch # { epoch } validation loss: { val_loss_hist . value : .3f } \" ) end = time . time () print ( f \"Took { (( end - start ) / 60 ) : .3f } minutes for epoch { epoch } \" ) if ( epoch + 1 ) % SAVE_MODEL_EPOCH == 0 : # save model after every n epochs torch . save ( model . state_dict (), f \" { OUT_DIR } / { MODEL_NAME }{ epoch + 1 } .pth\" ) print ( 'SAVING MODEL COMPLETE... \\n ' ) if ( epoch + 1 ) % SAVE_PLOTS_EPOCH == 0 : # save loss plots after n epochs train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) valid_ax . plot ( val_loss , color = 'red' ) valid_ax . set_xlabel ( 'iterations' ) valid_ax . set_ylabel ( 'validation loss' ) # Calculate the average training and validation loss for this epoch avg_train_loss = train_loss_hist . value avg_val_loss = val_loss_hist . value # Append the average loss to a list to store epoch-wise loss values train_loss_plot_list . append ( avg_train_loss ) val_loss_plot_list . append ( avg_val_loss ) # Validation loss is plotted after every epoch, so scale its x-axis based on epochs #validation_x_scale = [(i + 1) * len(train_loader) for i in range(len(val_loss))] # Scale for validation intervals # Generate x-values for validation loss so it scales with the train loss # Generate x-axis values representing the epoch numbers epochs = range ( 1 , len ( train_loss_plot_list ) + 1 ) # Plot training and validation loss averages per epoch ax . plot ( epochs , train_loss_plot_list , label = 'Average Training Loss' , color = 'blue' , marker = 'o' ) ax . plot ( epochs , val_loss_plot_list , label = 'Average Validation Loss' , color = 'red' , marker = 'o' ) # Set labels and add legend ax . set_xlabel ( 'Epochs' ) ax . set_ylabel ( 'Average Loss' ) ax . legend ( loc = 'upper right' ) # Apply tight layout plt . tight_layout () # Update the Matplotlib object in Panel to show the figure train_loss_mpl . object = figure #train_loss_mpl.object = figure_1 figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) figure_2 . savefig ( f \" { PLOT_DIR } /valid_loss_ { epoch + 1 } .png\" ) print ( 'SAVING PLOTS COMPLETE...' ) if ( epoch + 1 ) == NUM_EPOCHS : # save loss plots and model once at the end train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) valid_ax . plot ( val_loss , color = 'red' ) valid_ax . set_xlabel ( 'iterations' ) valid_ax . set_ylabel ( 'validation loss' ) figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) figure_2 . savefig ( f \" { PLOT_DIR } /valid_loss_ { epoch + 1 } .png\" ) torch . save ( model . state_dict (), f \" { OUT_DIR } /model { epoch + 1 } .pth\" ) plt . close ( 'all' ) return [ train_loss_list , val_loss_list ] def training.train_model_no_val(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH): Train a PyTorch model using only the training dataset, without validation. Inputs model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset (unused). DEVICE (torch.device): Device for training (CPU or GPU). MODEL_NAME (str): Base filename for saving model checkpoints. NUM_EPOCHS (int): Number of training epochs. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save training loss plots. Output list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Empty list (validation losses not tracked). Source code in library/training.py 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 def train_model_no_val ( model , train_loader , valid_loader , DEVICE , MODEL_NAME , NUM_EPOCHS , OUT_DIR , PLOT_DIR , SAVE_MODEL_EPOCH , SAVE_PLOTS_EPOCH ): \"\"\" Train a PyTorch model using only the training dataset, without validation. Inputs: model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset (unused). DEVICE (torch.device): Device for training (CPU or GPU). MODEL_NAME (str): Base filename for saving model checkpoints. NUM_EPOCHS (int): Number of training epochs. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save training loss plots. Output: list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Empty list (validation losses not tracked). \"\"\" model = model . to ( DEVICE ) # get the model parameters params = [ p for p in model . parameters () if p . requires_grad ] # define the optimizer optimizer = torch . optim . SGD ( params , lr = 0.001 , momentum = 0.9 , weight_decay = 0.0005 ) # initialize the Averager class train_loss_hist = Averager () val_loss_hist = Averager () train_itr = 1 val_itr = 1 # train and validation loss lists to store loss values of all... # ... iterations till ena and plot graphs for all iterations train_loss_list = [] val_loss_list = [] for epoch in range ( NUM_EPOCHS ): print ( f \" \\n EPOCH { epoch + 1 } of { NUM_EPOCHS } \" ) # reset the training and validation loss histories for the current epoch train_loss_hist . reset () #val_loss_hist.reset() # create two subplots, one for each, training and validation figure_1 , train_ax = plt . subplots () #figure_2, valid_ax = plt.subplots() # start timer and carry out training and validation start = time . time () train_loss = train ( train_loader , model , optimizer , train_loss_list , train_loss_hist , train_itr , DEVICE ) #val_loss = validate(valid_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE) print ( f \"Epoch # { epoch } train loss: { train_loss_hist . value : .3f } \" ) #print(f\"Epoch #{epoch} validation loss: {val_loss_hist.value:.3f}\") end = time . time () print ( f \"Took { (( end - start ) / 60 ) : .3f } minutes for epoch { epoch } \" ) if ( epoch + 1 ) % SAVE_MODEL_EPOCH == 0 : # save model after every n epochs torch . save ( model . state_dict (), f \" { OUT_DIR } / { MODEL_NAME }{ epoch + 1 } .pth\" ) print ( 'SAVING MODEL COMPLETE... \\n ' ) if ( epoch + 1 ) % SAVE_PLOTS_EPOCH == 0 : # save loss plots after n epochs train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) #valid_ax.plot(val_loss, color='red') #valid_ax.set_xlabel('iterations') #valid_ax.set_ylabel('validation loss') figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) #figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\") print ( 'SAVING PLOTS COMPLETE...' ) if ( epoch + 1 ) == NUM_EPOCHS : # save loss plots and model once at the end train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) #valid_ax.plot(val_loss, color='red') #valid_ax.set_xlabel('iterations') #valid_ax.set_ylabel('validation loss') figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) #figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\") torch . save ( model . state_dict (), f \" { OUT_DIR } /model { epoch + 1 } .pth\" ) plt . close ( 'all' ) return [ train_loss_list , val_loss_list ] class Averager: Utility class to compute and maintain the running average of numeric values. Methods: Name Description send Add a new value to the running total and increment count. value Returns the current average of all values received. reset Resets the total and count to start a new average calculation. Source code in library/training.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 class Averager : \"\"\" Utility class to compute and maintain the running average of numeric values. Methods: send(value): Add a new value to the running total and increment count. value (property): Returns the current average of all values received. reset(): Resets the total and count to start a new average calculation. \"\"\" def __init__ ( self ): self . current_total = 0.0 self . iterations = 0.0 def send ( self , value ): self . current_total += value self . iterations += 1 @property def value ( self ): if self . iterations == 0 : return 0 else : return 1.0 * self . current_total / self . iterations def reset ( self ): self . current_total = 0.0 self . iterations = 0.0","title":"ez-frcnn.training"},{"location":"training/#ez-frcnntraining","text":"def training.create_model(num_classes): Creates a Faster R-CNN model pre-trained on COCO and modifies its head for a custom number of classes. Inputs num_classes (int): Number of output classes for detection (including background). Outputs torchvision.models.detection.FasterRCNN: The modified Faster R-CNN model ready for training or inference. Source code in library/training.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def create_model ( num_classes ): \"\"\" Creates a Faster R-CNN model pre-trained on COCO and modifies its head for a custom number of classes. Inputs: num_classes (int): Number of output classes for detection (including background). Outputs: torchvision.models.detection.FasterRCNN: The modified Faster R-CNN model ready for training or inference. \"\"\" # load Faster RCNN pre-trained model model = torchvision . models . detection . fasterrcnn_resnet50_fpn_v2 ( weights = 'COCO_V1' ) # get the number of input features in_features = model . roi_heads . box_predictor . cls_score . in_features # define a new head for the detector with required number of classes model . roi_heads . box_predictor = FastRCNNPredictor ( in_features , num_classes ) return model def training.load_model_train(model_name, MODEL_DIR, NUM_CLASSES): Loads a trained model for inference or further training. Inputs model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory where the model weights are stored. NUM_CLASSES (int): Number of output classes the model predicts. Outputs torch.nn.Module: The model loaded with trained weights, moved to the appropriate device (CPU or GPU). Source code in library/training.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def load_model_train ( model_name , MODEL_DIR , NUM_CLASSES ): \"\"\" Loads a trained model for inference or further training. Inputs: model_name (str): Filename of the saved model weights. MODEL_DIR (str): Directory where the model weights are stored. NUM_CLASSES (int): Number of output classes the model predicts. Outputs: torch.nn.Module: The model loaded with trained weights, moved to the appropriate device (CPU or GPU). \"\"\" # set the computation device modelPath = './models/' + model_name device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # load the model and the trained weights model = create_model ( num_classes = NUM_CLASSES ) . to ( device ) model . load_state_dict ( torch . load ( modelPath , map_location = device )) return model def training.train(train_data_loader, model, optimizer, train_loss_list, train_loss_hist, train_itr, DEVICE): Performs one epoch of training on the provided model. Inputs train_data_loader (DataLoader): Iterable over training dataset batches. model (torch.nn.Module): The model to train. optimizer (torch.optim.Optimizer): Optimizer used for updating model weights. train_loss_list (list): List to store loss values per iteration. train_loss_hist (generator): Generator to track or log loss history. train_itr (int): Current training iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs train_loss_list (list): Updated list of training loss values. Source code in library/training.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def train ( train_data_loader , model , optimizer , train_loss_list , train_loss_hist , train_itr , DEVICE ): \"\"\" Performs one epoch of training on the provided model. Inputs: train_data_loader (DataLoader): Iterable over training dataset batches. model (torch.nn.Module): The model to train. optimizer (torch.optim.Optimizer): Optimizer used for updating model weights. train_loss_list (list): List to store loss values per iteration. train_loss_hist (generator): Generator to track or log loss history. train_itr (int): Current training iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs: train_loss_list (list): Updated list of training loss values. \"\"\" print ( 'Training' ) #global train_itr # initialize tqdm progress bar #prog_bar = Tqdm(train_data_loader, total=len(train_data_loader)) for i , data in enumerate ( train_data_loader ): optimizer . zero_grad () images , targets = data images = list ( image . to ( DEVICE ) for image in images ) targets = [{ k : v . to ( DEVICE ) for k , v in t . items ()} for t in targets ] loss_dict = model ( images , targets ) losses = sum ( loss for loss in loss_dict . values ()) loss_value = losses . item () train_loss_list . append ( loss_value ) train_loss_hist . send ( loss_value ) losses . backward () optimizer . step () train_itr += 1 # update the loss value beside the progress bar for each iteration #prog_bar.set_description(desc=f\"Loss: {loss_value:.4f}\") return train_loss_list def training.validate(valid_data_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE): Performs one epoch of validation on the provided model. Inputs valid_data_loader (DataLoader): Iterable over validation dataset batches. model (torch.nn.Module): The model to validate. val_loss_list (list): List to store validation loss values per iteration. val_loss_hist (generator): Generator to track or log validation loss history. val_itr (int): Current validation iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs val_loss_list (list): Updated list of validation loss values. Source code in library/training.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def validate ( valid_data_loader , model , val_loss_list , val_loss_hist , val_itr , DEVICE ): \"\"\" Performs one epoch of validation on the provided model. Inputs: valid_data_loader (DataLoader): Iterable over validation dataset batches. model (torch.nn.Module): The model to validate. val_loss_list (list): List to store validation loss values per iteration. val_loss_hist (generator): Generator to track or log validation loss history. val_itr (int): Current validation iteration count. DEVICE (torch.device): Device (CPU or GPU) to perform computations on. Outputs: val_loss_list (list): Updated list of validation loss values. \"\"\" print ( 'Validating' ) #global val_itr # initialize tqdm progress bar #prog_bar = tqdm(valid_data_loader, total=len(valid_data_loader)) for i , data in enumerate ( valid_data_loader ): images , targets = data images = list ( image . to ( DEVICE ) for image in images ) targets = [{ k : v . to ( DEVICE ) for k , v in t . items ()} for t in targets ] with torch . no_grad (): loss_dict = model ( images , targets ) losses = sum ( loss for loss in loss_dict . values ()) loss_value = losses . item () val_loss_list . append ( loss_value ) val_loss_hist . send ( loss_value ) val_itr += 1 # update the loss value beside the progress bar for each iteration #prog_bar.set_description(desc=f\"Loss: {loss_value:.4f}\") return val_loss_list def training.train_model(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH, tqdm_all, train_loss_mpl): Train a given PyTorch model with training and validation datasets, periodically saving model checkpoints and loss plots. Inputs model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset. DEVICE (torch.device): Device on which to run training (CPU or GPU). MODEL_NAME (str): Base name for saving model checkpoints. NUM_EPOCHS (int): Total number of epochs for training. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training/validation loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save the loss plots. tqdm_all (iterable): Iterable (e.g., tqdm wrapper) for epoch iteration. train_loss_mpl (Panel object): Matplotlib figure holder for live loss plot updates. Output list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Loss values for all validation iterations. Source code in library/training.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 def train_model ( model , train_loader , valid_loader , DEVICE , MODEL_NAME , NUM_EPOCHS , OUT_DIR , PLOT_DIR , SAVE_MODEL_EPOCH , SAVE_PLOTS_EPOCH , tqdm_all , train_loss_mpl ): \"\"\" Train a given PyTorch model with training and validation datasets, periodically saving model checkpoints and loss plots. Inputs: model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset. DEVICE (torch.device): Device on which to run training (CPU or GPU). MODEL_NAME (str): Base name for saving model checkpoints. NUM_EPOCHS (int): Total number of epochs for training. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training/validation loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save the loss plots. tqdm_all (iterable): Iterable (e.g., tqdm wrapper) for epoch iteration. train_loss_mpl (Panel object): Matplotlib figure holder for live loss plot updates. Output: list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Loss values for all validation iterations. \"\"\" model = model . to ( DEVICE ) # get the model parameters params = [ p for p in model . parameters () if p . requires_grad ] # define the optimizer optimizer = torch . optim . SGD ( params , lr = 0.001 , momentum = 0.9 , weight_decay = 0.0005 ) # initialize the Averager class train_loss_hist = Averager () val_loss_hist = Averager () train_itr = 1 val_itr = 1 # train and validation loss lists to store loss values of all... # ... iterations till ena and plot graphs for all iterations train_loss_list = [] train_loss_plot_list = [] val_loss_list = [] val_loss_plot_list = [] for epoch , data in enumerate ( tqdm_all ): print ( f \" \\n EPOCH { epoch + 1 } of { NUM_EPOCHS } \" ) # reset the training and validation loss histories for the current epoch train_loss_hist . reset () val_loss_hist . reset () # create two subplots, one for each, training and validation figure_1 , train_ax = plt . subplots () figure_2 , valid_ax = plt . subplots () figure , ax = plt . subplots ( figsize = ( 4 , 4 )) # Make the figure smaller (6x4 inches) # start timer and carry out training and validation start = time . time () train_loss = train ( train_loader , model , optimizer , train_loss_list , train_loss_hist , train_itr , DEVICE ) val_loss = validate ( valid_loader , model , val_loss_list , val_loss_hist , val_itr , DEVICE ) print ( f \"Epoch # { epoch } train loss: { train_loss_hist . value : .3f } \" ) print ( f \"Epoch # { epoch } validation loss: { val_loss_hist . value : .3f } \" ) end = time . time () print ( f \"Took { (( end - start ) / 60 ) : .3f } minutes for epoch { epoch } \" ) if ( epoch + 1 ) % SAVE_MODEL_EPOCH == 0 : # save model after every n epochs torch . save ( model . state_dict (), f \" { OUT_DIR } / { MODEL_NAME }{ epoch + 1 } .pth\" ) print ( 'SAVING MODEL COMPLETE... \\n ' ) if ( epoch + 1 ) % SAVE_PLOTS_EPOCH == 0 : # save loss plots after n epochs train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) valid_ax . plot ( val_loss , color = 'red' ) valid_ax . set_xlabel ( 'iterations' ) valid_ax . set_ylabel ( 'validation loss' ) # Calculate the average training and validation loss for this epoch avg_train_loss = train_loss_hist . value avg_val_loss = val_loss_hist . value # Append the average loss to a list to store epoch-wise loss values train_loss_plot_list . append ( avg_train_loss ) val_loss_plot_list . append ( avg_val_loss ) # Validation loss is plotted after every epoch, so scale its x-axis based on epochs #validation_x_scale = [(i + 1) * len(train_loader) for i in range(len(val_loss))] # Scale for validation intervals # Generate x-values for validation loss so it scales with the train loss # Generate x-axis values representing the epoch numbers epochs = range ( 1 , len ( train_loss_plot_list ) + 1 ) # Plot training and validation loss averages per epoch ax . plot ( epochs , train_loss_plot_list , label = 'Average Training Loss' , color = 'blue' , marker = 'o' ) ax . plot ( epochs , val_loss_plot_list , label = 'Average Validation Loss' , color = 'red' , marker = 'o' ) # Set labels and add legend ax . set_xlabel ( 'Epochs' ) ax . set_ylabel ( 'Average Loss' ) ax . legend ( loc = 'upper right' ) # Apply tight layout plt . tight_layout () # Update the Matplotlib object in Panel to show the figure train_loss_mpl . object = figure #train_loss_mpl.object = figure_1 figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) figure_2 . savefig ( f \" { PLOT_DIR } /valid_loss_ { epoch + 1 } .png\" ) print ( 'SAVING PLOTS COMPLETE...' ) if ( epoch + 1 ) == NUM_EPOCHS : # save loss plots and model once at the end train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) valid_ax . plot ( val_loss , color = 'red' ) valid_ax . set_xlabel ( 'iterations' ) valid_ax . set_ylabel ( 'validation loss' ) figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) figure_2 . savefig ( f \" { PLOT_DIR } /valid_loss_ { epoch + 1 } .png\" ) torch . save ( model . state_dict (), f \" { OUT_DIR } /model { epoch + 1 } .pth\" ) plt . close ( 'all' ) return [ train_loss_list , val_loss_list ] def training.train_model_no_val(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH): Train a PyTorch model using only the training dataset, without validation. Inputs model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset (unused). DEVICE (torch.device): Device for training (CPU or GPU). MODEL_NAME (str): Base filename for saving model checkpoints. NUM_EPOCHS (int): Number of training epochs. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save training loss plots. Output list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Empty list (validation losses not tracked). Source code in library/training.py 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 def train_model_no_val ( model , train_loader , valid_loader , DEVICE , MODEL_NAME , NUM_EPOCHS , OUT_DIR , PLOT_DIR , SAVE_MODEL_EPOCH , SAVE_PLOTS_EPOCH ): \"\"\" Train a PyTorch model using only the training dataset, without validation. Inputs: model (torch.nn.Module): The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset (unused). DEVICE (torch.device): Device for training (CPU or GPU). MODEL_NAME (str): Base filename for saving model checkpoints. NUM_EPOCHS (int): Number of training epochs. OUT_DIR (str): Directory to save model checkpoints. PLOT_DIR (str): Directory to save training loss plots. SAVE_MODEL_EPOCH (int): Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int): Frequency (in epochs) to save training loss plots. Output: list: A list containing two elements: - train_loss_list: Loss values for all training iterations. - val_loss_list: Empty list (validation losses not tracked). \"\"\" model = model . to ( DEVICE ) # get the model parameters params = [ p for p in model . parameters () if p . requires_grad ] # define the optimizer optimizer = torch . optim . SGD ( params , lr = 0.001 , momentum = 0.9 , weight_decay = 0.0005 ) # initialize the Averager class train_loss_hist = Averager () val_loss_hist = Averager () train_itr = 1 val_itr = 1 # train and validation loss lists to store loss values of all... # ... iterations till ena and plot graphs for all iterations train_loss_list = [] val_loss_list = [] for epoch in range ( NUM_EPOCHS ): print ( f \" \\n EPOCH { epoch + 1 } of { NUM_EPOCHS } \" ) # reset the training and validation loss histories for the current epoch train_loss_hist . reset () #val_loss_hist.reset() # create two subplots, one for each, training and validation figure_1 , train_ax = plt . subplots () #figure_2, valid_ax = plt.subplots() # start timer and carry out training and validation start = time . time () train_loss = train ( train_loader , model , optimizer , train_loss_list , train_loss_hist , train_itr , DEVICE ) #val_loss = validate(valid_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE) print ( f \"Epoch # { epoch } train loss: { train_loss_hist . value : .3f } \" ) #print(f\"Epoch #{epoch} validation loss: {val_loss_hist.value:.3f}\") end = time . time () print ( f \"Took { (( end - start ) / 60 ) : .3f } minutes for epoch { epoch } \" ) if ( epoch + 1 ) % SAVE_MODEL_EPOCH == 0 : # save model after every n epochs torch . save ( model . state_dict (), f \" { OUT_DIR } / { MODEL_NAME }{ epoch + 1 } .pth\" ) print ( 'SAVING MODEL COMPLETE... \\n ' ) if ( epoch + 1 ) % SAVE_PLOTS_EPOCH == 0 : # save loss plots after n epochs train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) #valid_ax.plot(val_loss, color='red') #valid_ax.set_xlabel('iterations') #valid_ax.set_ylabel('validation loss') figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) #figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\") print ( 'SAVING PLOTS COMPLETE...' ) if ( epoch + 1 ) == NUM_EPOCHS : # save loss plots and model once at the end train_ax . plot ( train_loss , color = 'blue' ) train_ax . set_xlabel ( 'iterations' ) train_ax . set_ylabel ( 'train loss' ) #valid_ax.plot(val_loss, color='red') #valid_ax.set_xlabel('iterations') #valid_ax.set_ylabel('validation loss') figure_1 . savefig ( f \" { PLOT_DIR } /train_loss_ { epoch + 1 } .png\" ) #figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\") torch . save ( model . state_dict (), f \" { OUT_DIR } /model { epoch + 1 } .pth\" ) plt . close ( 'all' ) return [ train_loss_list , val_loss_list ] class Averager: Utility class to compute and maintain the running average of numeric values. Methods: Name Description send Add a new value to the running total and increment count. value Returns the current average of all values received. reset Resets the total and count to start a new average calculation. Source code in library/training.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 class Averager : \"\"\" Utility class to compute and maintain the running average of numeric values. Methods: send(value): Add a new value to the running total and increment count. value (property): Returns the current average of all values received. reset(): Resets the total and count to start a new average calculation. \"\"\" def __init__ ( self ): self . current_total = 0.0 self . iterations = 0.0 def send ( self , value ): self . current_total += value self . iterations += 1 @property def value ( self ): if self . iterations == 0 : return 0 else : return 1.0 * self . current_total / self . iterations def reset ( self ): self . current_total = 0.0 self . iterations = 0.0","title":"ez-frcnn.training"},{"location":"utils/","text":"ez-frcnn.utils def utils.collate_fn(batch): Custom collate function to merge a list of samples into a batch. Inputs batch (list): List of samples, where each sample is a tuple of data elements. Output tuple: Tuple of tuples, where each inner tuple contains all elements of a given type from the batch (e.g., images, targets). Source code in library/utils.py 21 22 23 24 25 26 27 28 29 30 31 32 33 def collate_fn ( batch ): \"\"\" Custom collate function to merge a list of samples into a batch. Inputs: batch (list): List of samples, where each sample is a tuple of data elements. Output: tuple: Tuple of tuples, where each inner tuple contains all elements of a given type from the batch (e.g., images, targets). \"\"\" return tuple ( zip ( * batch )) def utils.get_loaders(train_dataset, valid_dataset, BATCH_SIZE, collate_fn): Create DataLoader objects for training and validation datasets. Inputs train_dataset (Dataset): PyTorch Dataset object for training data. valid_dataset (Dataset): PyTorch Dataset object for validation data. BATCH_SIZE (int): Number of samples per batch to load. collate_fn (callable): Function to merge a list of samples into a mini-batch, used for handling variable-size inputs. Output list: A list containing two DataLoader objects: - train_loader: DataLoader for the training dataset with shuffling enabled. - valid_loader: DataLoader for the validation dataset without shuffling. Source code in library/utils.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 def get_loaders ( train_dataset , valid_dataset , BATCH_SIZE , collate_fn ): \"\"\" Create DataLoader objects for training and validation datasets. Inputs: train_dataset (Dataset): PyTorch Dataset object for training data. valid_dataset (Dataset): PyTorch Dataset object for validation data. BATCH_SIZE (int): Number of samples per batch to load. collate_fn (callable): Function to merge a list of samples into a mini-batch, used for handling variable-size inputs. Output: list: A list containing two DataLoader objects: - train_loader: DataLoader for the training dataset with shuffling enabled. - valid_loader: DataLoader for the validation dataset without shuffling. \"\"\" train_loader = DataLoader ( train_dataset , batch_size = BATCH_SIZE , shuffle = True , num_workers = 0 , collate_fn = collate_fn ) valid_loader = DataLoader ( valid_dataset , batch_size = BATCH_SIZE , shuffle = False , num_workers = 0 , collate_fn = collate_fn ) return [ train_loader , valid_loader ] class utils.getDataset(Dataset): Bases: Dataset Custom PyTorch Dataset for loading images and corresponding bounding box annotations from a directory containing image files and Pascal VOC-style XML annotation files. Attributes: dir_path ( str ) \u2013 Directory path containing images and XML annotation files. width ( int ) \u2013 Desired image width after resizing. height ( int ) \u2013 Desired image height after resizing. transforms ( callable ) \u2013 Optional transformations to be applied on the images and bounding boxes. classes ( list ) \u2013 List of unique class names parsed from annotation XML files, with 'background' as the first class. all_images ( list ) \u2013 Sorted list of image filenames in the dataset directory. Methods: Name Description get_classes_from_annotations Parses XML annotation files to extract all unique classes. __getitem__ Loads and processes the image and its annotations at index idx . Applies resizing and optional transformations. Returns the processed image tensor and target dictionary with bounding boxes and labels. __len__ Returns the total number of images in the dataset. Usage dataset = getDataset(dir_path='path/to/data', width=224, height=224, transforms=transform_function) image, target = dataset[0] Source code in library/utils.pyclass getDataset ( Dataset ): \"\"\" Custom PyTorch Dataset for loading images and corresponding bounding box annotations from a directory containing image files and Pascal VOC-style XML annotation files. Attributes: dir_path (str): Directory path containing images and XML annotation files. width (int): Desired image width after resizing. height (int): Desired image height after resizing. transforms (callable, optional): Optional transformations to be applied on the images and bounding boxes. classes (list): List of unique class names parsed from annotation XML files, with 'background' as the first class. all_images (list): Sorted list of image filenames in the dataset directory. Methods: get_classes_from_annotations(): Parses XML annotation files to extract all unique classes. __getitem__(idx): Loads and processes the image and its annotations at index `idx`. Applies resizing and optional transformations. Returns the processed image tensor and target dictionary with bounding boxes and labels. __len__(): Returns the total number of images in the dataset. Usage: dataset = getDataset(dir_path='path/to/data', width=224, height=224, transforms=transform_function) image, target = dataset[0] \"\"\" def __init__ ( self , dir_path , width , height , transforms = None ): self . transforms = transforms self . dir_path = dir_path self . height = height self . width = width self . classes = self . get_classes_from_annotations () image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' , 'tif' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions self . image_paths = glob . glob ( f \" { self . dir_path } /*.png\" ) for extension in all_extensions : self . image_paths . extend ( glob . glob ( f \" { self . dir_path } /*. { extension } \" )) # Extract just the filenames self . all_images = [ os . path . basename ( image_path ) for image_path in self . image_paths ] self . all_images = sorted ( self . all_images ) def get_classes_from_annotations ( self ): \"\"\" Parse all XML files in the dataset directory to build a list of unique classes. \"\"\" classes = set () xml_files = glob . glob ( f \" { self . dir_path } /*.xml\" ) for xml_file in xml_files : tree = et . parse ( xml_file ) root = tree . getroot () for member in root . findall ( 'object' ): try : class_name = member . find ( 'class' ) . text except : class_name = member . find ( 'label' ) . text classes . add ( class_name ) # Add 'background' as the first class and sort the rest alphabetically return [ 'background' ] + sorted ( classes ) def __getitem__ ( self , idx ): # capture the image name and the full image path image_name = self . all_images [ idx ] #print(image_name) image_path = os . path . join ( self . dir_path , image_name ) #print(image_path) # read the image image = cv2 . imread ( image_path ) # convert BGR to RGB color format image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) image_resized = cv2 . resize ( image , ( self . width , self . height )) image_resized /= 255.0 af = image_name . split ( '.' ) # capture the corresponding XML file for getting the annotations annot_filename = af [ 0 ] + '.xml' annot_file_path = self . dir_path + '/' + annot_filename boxes = [] labels = [] tree = et . parse ( annot_file_path ) root = tree . getroot () # get the height and width of the image image_width = image . shape [ 1 ] image_height = image . shape [ 0 ] # box coordinates for xml files are extracted and corrected for image size given for member in root . findall ( 'object' ): # map the current object name to `classes` list to get... # ... the label index and append to `labels` list try : labels . append ( self . classes . index ( member . find ( 'class' ) . text )) except : labels . append ( self . classes . index ( member . find ( 'label' ) . text )) try : # xmin = left corner x-coordinates xmin = int ( member . find ( 'xmin' ) . text ) except : # xmin = left corner x-coordinates xmin = int ( member . find ( 'x' ) . text ) try : # xmax = right corner x-coordinates xmax = int ( member . find ( 'xmax' ) . text ) except : # xmax = right corner x-coordinates xmax = xmin + int ( member . find ( 'width' ) . text ) try : # ymin = left corner y-coordinates ymin = int ( member . find ( 'ymin' ) . text ) except : # xmin = left corner y-coordinates ymin = int ( member . find ( 'y' ) . text ) try : # ymax = right corner x-coordinates ymax = int ( member . find ( 'ymax' ) . text ) except : # xmin = left corner y-coordinates ymax = ymin + int ( member . find ( 'height' ) . text ) # resize the bounding boxes according to the... # ... desired `width`, `height` xmin_final = ( xmin / image_width ) * self . width xmax_final = ( xmax / image_width ) * self . width ymin_final = ( ymin / image_height ) * self . height ymax_final = ( ymax / image_height ) * self . height boxes . append ([ xmin_final , ymin_final , xmax_final , ymax_final ]) # bounding box to tensor boxes = torch . as_tensor ( boxes , dtype = torch . float32 ) # area of the bounding boxes area = ( boxes [:, 3 ] - boxes [:, 1 ]) * ( boxes [:, 2 ] - boxes [:, 0 ]) # no crowd instances iscrowd = torch . zeros (( boxes . shape [ 0 ],), dtype = torch . int64 ) # labels to tensor labels = torch . as_tensor ( labels , dtype = torch . int64 ) # prepare the final `target` dictionary target = {} target [ \"boxes\" ] = boxes target [ \"labels\" ] = labels target [ \"area\" ] = area target [ \"iscrowd\" ] = iscrowd image_id = torch . tensor ([ idx ]) target [ \"image_id\" ] = image_id # apply the image transforms if self . transforms : sample = self . transforms ( image = image_resized , bboxes = target [ 'boxes' ], labels = labels ) image_resized = sample [ 'image' ] target [ 'boxes' ] = torch . Tensor ( sample [ 'bboxes' ]) return image_resized , target def __len__ ( self ): return len ( self . all_images ) get_classes_from_annotations () Parse all XML files in the dataset directory to build a list of unique classes. Source code in library/utils.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def get_classes_from_annotations ( self ): \"\"\" Parse all XML files in the dataset directory to build a list of unique classes. \"\"\" classes = set () xml_files = glob . glob ( f \" { self . dir_path } /*.xml\" ) for xml_file in xml_files : tree = et . parse ( xml_file ) root = tree . getroot () for member in root . findall ( 'object' ): try : class_name = member . find ( 'class' ) . text except : class_name = member . find ( 'label' ) . text classes . add ( class_name ) # Add 'background' as the first class and sort the rest alphabetically return [ 'background' ] + sorted ( classes )","title":"ez-frcnn.utils"},{"location":"utils/#ez-frcnnutils","text":"def utils.collate_fn(batch): Custom collate function to merge a list of samples into a batch. Inputs batch (list): List of samples, where each sample is a tuple of data elements. Output tuple: Tuple of tuples, where each inner tuple contains all elements of a given type from the batch (e.g., images, targets). Source code in library/utils.py 21 22 23 24 25 26 27 28 29 30 31 32 33 def collate_fn ( batch ): \"\"\" Custom collate function to merge a list of samples into a batch. Inputs: batch (list): List of samples, where each sample is a tuple of data elements. Output: tuple: Tuple of tuples, where each inner tuple contains all elements of a given type from the batch (e.g., images, targets). \"\"\" return tuple ( zip ( * batch )) def utils.get_loaders(train_dataset, valid_dataset, BATCH_SIZE, collate_fn): Create DataLoader objects for training and validation datasets. Inputs train_dataset (Dataset): PyTorch Dataset object for training data. valid_dataset (Dataset): PyTorch Dataset object for validation data. BATCH_SIZE (int): Number of samples per batch to load. collate_fn (callable): Function to merge a list of samples into a mini-batch, used for handling variable-size inputs. Output list: A list containing two DataLoader objects: - train_loader: DataLoader for the training dataset with shuffling enabled. - valid_loader: DataLoader for the validation dataset without shuffling. Source code in library/utils.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 def get_loaders ( train_dataset , valid_dataset , BATCH_SIZE , collate_fn ): \"\"\" Create DataLoader objects for training and validation datasets. Inputs: train_dataset (Dataset): PyTorch Dataset object for training data. valid_dataset (Dataset): PyTorch Dataset object for validation data. BATCH_SIZE (int): Number of samples per batch to load. collate_fn (callable): Function to merge a list of samples into a mini-batch, used for handling variable-size inputs. Output: list: A list containing two DataLoader objects: - train_loader: DataLoader for the training dataset with shuffling enabled. - valid_loader: DataLoader for the validation dataset without shuffling. \"\"\" train_loader = DataLoader ( train_dataset , batch_size = BATCH_SIZE , shuffle = True , num_workers = 0 , collate_fn = collate_fn ) valid_loader = DataLoader ( valid_dataset , batch_size = BATCH_SIZE , shuffle = False , num_workers = 0 , collate_fn = collate_fn ) return [ train_loader , valid_loader ] class utils.getDataset(Dataset): Bases: Dataset Custom PyTorch Dataset for loading images and corresponding bounding box annotations from a directory containing image files and Pascal VOC-style XML annotation files. Attributes: dir_path ( str ) \u2013 Directory path containing images and XML annotation files. width ( int ) \u2013 Desired image width after resizing. height ( int ) \u2013 Desired image height after resizing. transforms ( callable ) \u2013 Optional transformations to be applied on the images and bounding boxes. classes ( list ) \u2013 List of unique class names parsed from annotation XML files, with 'background' as the first class. all_images ( list ) \u2013 Sorted list of image filenames in the dataset directory. Methods: Name Description get_classes_from_annotations Parses XML annotation files to extract all unique classes. __getitem__ Loads and processes the image and its annotations at index idx . Applies resizing and optional transformations. Returns the processed image tensor and target dictionary with bounding boxes and labels. __len__ Returns the total number of images in the dataset. Usage dataset = getDataset(dir_path='path/to/data', width=224, height=224, transforms=transform_function) image, target = dataset[0] Source code in library/utils.pyclass getDataset ( Dataset ): \"\"\" Custom PyTorch Dataset for loading images and corresponding bounding box annotations from a directory containing image files and Pascal VOC-style XML annotation files. Attributes: dir_path (str): Directory path containing images and XML annotation files. width (int): Desired image width after resizing. height (int): Desired image height after resizing. transforms (callable, optional): Optional transformations to be applied on the images and bounding boxes. classes (list): List of unique class names parsed from annotation XML files, with 'background' as the first class. all_images (list): Sorted list of image filenames in the dataset directory. Methods: get_classes_from_annotations(): Parses XML annotation files to extract all unique classes. __getitem__(idx): Loads and processes the image and its annotations at index `idx`. Applies resizing and optional transformations. Returns the processed image tensor and target dictionary with bounding boxes and labels. __len__(): Returns the total number of images in the dataset. Usage: dataset = getDataset(dir_path='path/to/data', width=224, height=224, transforms=transform_function) image, target = dataset[0] \"\"\" def __init__ ( self , dir_path , width , height , transforms = None ): self . transforms = transforms self . dir_path = dir_path self . height = height self . width = width self . classes = self . get_classes_from_annotations () image_extensions = [ 'jpg' , 'jpeg' , 'gif' , 'bmp' , 'tiff' , 'webp' , 'tif' ] all_extensions = image_extensions + [ ext . upper () for ext in image_extensions ] # Add uppercase versions self . image_paths = glob . glob ( f \" { self . dir_path } /*.png\" ) for extension in all_extensions : self . image_paths . extend ( glob . glob ( f \" { self . dir_path } /*. { extension } \" )) # Extract just the filenames self . all_images = [ os . path . basename ( image_path ) for image_path in self . image_paths ] self . all_images = sorted ( self . all_images ) def get_classes_from_annotations ( self ): \"\"\" Parse all XML files in the dataset directory to build a list of unique classes. \"\"\" classes = set () xml_files = glob . glob ( f \" { self . dir_path } /*.xml\" ) for xml_file in xml_files : tree = et . parse ( xml_file ) root = tree . getroot () for member in root . findall ( 'object' ): try : class_name = member . find ( 'class' ) . text except : class_name = member . find ( 'label' ) . text classes . add ( class_name ) # Add 'background' as the first class and sort the rest alphabetically return [ 'background' ] + sorted ( classes ) def __getitem__ ( self , idx ): # capture the image name and the full image path image_name = self . all_images [ idx ] #print(image_name) image_path = os . path . join ( self . dir_path , image_name ) #print(image_path) # read the image image = cv2 . imread ( image_path ) # convert BGR to RGB color format image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) . astype ( np . float32 ) image_resized = cv2 . resize ( image , ( self . width , self . height )) image_resized /= 255.0 af = image_name . split ( '.' ) # capture the corresponding XML file for getting the annotations annot_filename = af [ 0 ] + '.xml' annot_file_path = self . dir_path + '/' + annot_filename boxes = [] labels = [] tree = et . parse ( annot_file_path ) root = tree . getroot () # get the height and width of the image image_width = image . shape [ 1 ] image_height = image . shape [ 0 ] # box coordinates for xml files are extracted and corrected for image size given for member in root . findall ( 'object' ): # map the current object name to `classes` list to get... # ... the label index and append to `labels` list try : labels . append ( self . classes . index ( member . find ( 'class' ) . text )) except : labels . append ( self . classes . index ( member . find ( 'label' ) . text )) try : # xmin = left corner x-coordinates xmin = int ( member . find ( 'xmin' ) . text ) except : # xmin = left corner x-coordinates xmin = int ( member . find ( 'x' ) . text ) try : # xmax = right corner x-coordinates xmax = int ( member . find ( 'xmax' ) . text ) except : # xmax = right corner x-coordinates xmax = xmin + int ( member . find ( 'width' ) . text ) try : # ymin = left corner y-coordinates ymin = int ( member . find ( 'ymin' ) . text ) except : # xmin = left corner y-coordinates ymin = int ( member . find ( 'y' ) . text ) try : # ymax = right corner x-coordinates ymax = int ( member . find ( 'ymax' ) . text ) except : # xmin = left corner y-coordinates ymax = ymin + int ( member . find ( 'height' ) . text ) # resize the bounding boxes according to the... # ... desired `width`, `height` xmin_final = ( xmin / image_width ) * self . width xmax_final = ( xmax / image_width ) * self . width ymin_final = ( ymin / image_height ) * self . height ymax_final = ( ymax / image_height ) * self . height boxes . append ([ xmin_final , ymin_final , xmax_final , ymax_final ]) # bounding box to tensor boxes = torch . as_tensor ( boxes , dtype = torch . float32 ) # area of the bounding boxes area = ( boxes [:, 3 ] - boxes [:, 1 ]) * ( boxes [:, 2 ] - boxes [:, 0 ]) # no crowd instances iscrowd = torch . zeros (( boxes . shape [ 0 ],), dtype = torch . int64 ) # labels to tensor labels = torch . as_tensor ( labels , dtype = torch . int64 ) # prepare the final `target` dictionary target = {} target [ \"boxes\" ] = boxes target [ \"labels\" ] = labels target [ \"area\" ] = area target [ \"iscrowd\" ] = iscrowd image_id = torch . tensor ([ idx ]) target [ \"image_id\" ] = image_id # apply the image transforms if self . transforms : sample = self . transforms ( image = image_resized , bboxes = target [ 'boxes' ], labels = labels ) image_resized = sample [ 'image' ] target [ 'boxes' ] = torch . Tensor ( sample [ 'bboxes' ]) return image_resized , target def __len__ ( self ): return len ( self . all_images )","title":"ez-frcnn.utils"},{"location":"utils/#library.utils.getDataset.get_classes_from_annotations","text":"Parse all XML files in the dataset directory to build a list of unique classes. Source code in library/utils.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def get_classes_from_annotations ( self ): \"\"\" Parse all XML files in the dataset directory to build a list of unique classes. \"\"\" classes = set () xml_files = glob . glob ( f \" { self . dir_path } /*.xml\" ) for xml_file in xml_files : tree = et . parse ( xml_file ) root = tree . getroot () for member in root . findall ( 'object' ): try : class_name = member . find ( 'class' ) . text except : class_name = member . find ( 'label' ) . text classes . add ( class_name ) # Add 'background' as the first class and sort the rest alphabetically return [ 'background' ] + sorted ( classes )","title":"get_classes_from_annotations"}]}